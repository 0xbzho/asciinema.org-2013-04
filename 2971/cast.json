[[1.016767,{"lines":{"0":[["bash-3.2$                                                                       ",{}]],"1":[["                                                                                ",{}]],"2":[["                                                                                ",{}]],"3":[["                                                                                ",{}]],"4":[["                                                                                ",{}]],"5":[["                                                                                ",{}]],"6":[["                                                                                ",{}]],"7":[["                                                                                ",{}]],"8":[["                                                                                ",{}]],"9":[["                                                                                ",{}]],"10":[["                                                                                ",{}]],"11":[["                                                                                ",{}]],"12":[["                                                                                ",{}]],"13":[["                                                                                ",{}]],"14":[["                                                                                ",{}]],"15":[["                                                                                ",{}]],"16":[["                                                                                ",{}]],"17":[["                                                                                ",{}]],"18":[["                                                                                ",{}]],"19":[["                                                                                ",{}]],"20":[["                                                                                ",{}]],"21":[["                                                                                ",{}]],"22":[["                                                                                ",{}]],"23":[["                                                                                ",{}]],"24":[["                                                                                ",{}]],"25":[["                                                                                ",{}]],"26":[["                                                                                ",{}]],"27":[["                                                                                ",{}]],"28":[["                                                                                ",{}]],"29":[["                                                                                ",{}]],"30":[["                                                                                ",{}]],"31":[["                                                                                ",{}]],"32":[["                                                                                ",{}]],"33":[["                                                                                ",{}]],"34":[["                                                                                ",{}]],"35":[["                                                                                ",{}]],"36":[["                                                                                ",{}]],"37":[["                                                                                ",{}]],"38":[["                                                                                ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":10,"y":0,"visible":true}}],[0.366486,{"lines":{"0":[["bash-3.2$ h                                                                     ",{}]]},"cursor":{"x":11}}],[0.055457,{"lines":{"0":[["bash-3.2$ hu                                                                    ",{}]]},"cursor":{"x":12}}],[0.049264,{"lines":{"0":[["bash-3.2$ hug                                                                   ",{}]]},"cursor":{"x":13}}],[0.083611,{"lines":{"0":[["bash-3.2$ hugs                                                                  ",{}]]},"cursor":{"x":14}}],[0.123321,{"cursor":{"x":0,"y":1}}],[0.009063,{"lines":{"1":[["__   __ __  __  ____   ___      _________________________________________       ",{}]],"2":[["||   || ||  || ||  || ||__      Hugs 98: Based on the Haskell 98 standard       ",{}]],"3":[["||___|| ||__|| ||__||  __||     Copyright (c) 1994-2005                         ",{}]],"4":[["||---||         ___||           World Wide Web: http://haskell.org/hugs         ",{}]],"5":[["||   ||                         Bugs: http://hackage.haskell.org/trac/hugs      ",{}]],"6":[["||   || Version: September 2006 _________________________________________       ",{}]],"8":[["Haskell 98 mode: Restart with command line option -98 to enable extensions      ",{}]]},"cursor":{"y":10}}],[0.036915,{"lines":{"10":[["Type :? for help                                                                ",{}]]},"cursor":{"y":11}}],[0.0006500000000000001,{"lines":{"11":[["Hugs>                                                                           ",{}]]},"cursor":{"x":6}}],[2.537208,{"lines":{"11":[["Hugs> :                                                                         ",{}]]},"cursor":{"x":7}}],[0.16805,{"lines":{"11":[["Hugs> :l                                                                        ",{}]]},"cursor":{"x":8}}],[0.095625,{"cursor":{"x":9}}],[0.888476,{"lines":{"11":[["Hugs> :l T                                                                      ",{}]]},"cursor":{"x":10}}],[0.127645,{"lines":{"11":[["Hugs> :l Te                                                                     ",{}]]},"cursor":{"x":11}}],[0.384658,{"lines":{"11":[["Hugs> :l Test                                                                   ",{}]]},"cursor":{"x":13}}],[0.360176,{"lines":{"11":[["Hugs> :l TestP                                                                  ",{}]]},"cursor":{"x":14}}],[0.151565,{}],[0.64867,{"lines":{"11":[["Hugs> :l TestPa                                                                 ",{}]]},"cursor":{"x":15}}],[0.086759,{"lines":{"11":[["Hugs> :l TestPar                                                                ",{}]]},"cursor":{"x":16}}],[0.145869,{"lines":{"11":[["Hugs> :l TestParser.hs                                                          ",{}]]},"cursor":{"x":23}}],[0.735214,{"cursor":{"x":0,"y":12}}],[0.008684000000000001,{"lines":{"12":[["TestParser>                                                                     ",{}]]},"cursor":{"x":12}}],[1.494036,{"lines":{"12":[["TestParser> l                                                                   ",{}]]},"cursor":{"x":13}}],[0.047914,{"lines":{"12":[["TestParser> ls                                                                  ",{}]]},"cursor":{"x":14}}],[0.360535,{"lines":{"12":[["TestParser> l                                                                   ",{}]]},"cursor":{"x":13}}],[0.07943799999999999,{"lines":{"12":[["TestParser> l1                                                                  ",{}]]},"cursor":{"x":14}}],[0.128027,{"cursor":{"x":0,"y":13}}],[0.013541,{"lines":{"13":[["Just ('a',\"bc\")                                                                 ",{}]],"14":[["TestParser>                                                                     ",{}]]},"cursor":{"x":12,"y":14}}],[1.258398,{"lines":{"14":[["TestParser> l                                                                   ",{}]]},"cursor":{"x":13}}],[0.073937,{"lines":{"14":[["TestParser> l2                                                                  ",{}]]},"cursor":{"x":14}}],[0.110893,{"cursor":{"x":0,"y":15}}],[0.010745,{"lines":{"15":[["Nothing                                                                         ",{}]],"16":[["TestParser>                                                                     ",{}]]},"cursor":{"x":12,"y":16}}],[0.204498,{"lines":{"16":[["TestParser> l                                                                   ",{}]]},"cursor":{"x":13}}],[0.096232,{"lines":{"16":[["TestParser> l3                                                                  ",{}]]},"cursor":{"x":14}}],[0.177255,{"cursor":{"x":0,"y":17}}],[0.008814000000000001,{"lines":{"17":[["Nothing                                                                         ",{}]],"18":[["TestParser>                                                                     ",{}]]},"cursor":{"x":12,"y":18}}],[1.045729,{"lines":{"18":[["TestParser> w                                                                   ",{}]]},"cursor":{"x":13}}],[0.040019,{"lines":{"18":[["TestParser> w1                                                                  ",{}]]},"cursor":{"x":14}}],[0.231764,{"cursor":{"x":0,"y":19}}],[0.010582,{"lines":{"19":[["Just (\"\",\"abc\")                                                                 ",{}]],"20":[["TestParser>                                                                     ",{}]]},"cursor":{"x":12,"y":20}}],[0.541721,{"lines":{"20":[["TestParser> w                                                                   ",{}]]},"cursor":{"x":13}}],[0.072389,{"lines":{"20":[["TestParser> w2                                                                  ",{}]]},"cursor":{"x":14}}],[0.665531,{"cursor":{"x":0,"y":21}}],[0.011007,{"lines":{"21":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"22":[["TestParser>                                                                     ",{}]]},"cursor":{"x":12,"y":22}}],[0.386484,{"lines":{"22":[["TestParser> c                                                                   ",{}]]},"cursor":{"x":13}}],[0.08130900000000001,{"lines":{"22":[["TestParser> c1                                                                  ",{}]]},"cursor":{"x":14}}],[0.223313,{"cursor":{"x":0,"y":23}}],[0.011227,{"lines":{"23":[["Just (\"ab\",\"c\")                                                                 ",{}]],"24":[["TestParser>                                                                     ",{}]]},"cursor":{"x":12,"y":24}}],[0.204273,{"lines":{"24":[["TestParser> c                                                                   ",{}]]},"cursor":{"x":13}}],[0.096009,{"lines":{"24":[["TestParser> c2                                                                  ",{}]]},"cursor":{"x":14}}],[0.155877,{"cursor":{"x":0,"y":25}}],[0.009006,{"lines":{"25":[["Just (\"\",\"ab\")                                                                  ",{}]],"26":[["TestParser>                                                                     ",{}]]},"cursor":{"x":12,"y":26}}],[0.204898,{"lines":{"26":[["TestParser> c                                                                   ",{}]]},"cursor":{"x":13}}],[0.110473,{"lines":{"26":[["TestParser> c3                                                                  ",{}]]},"cursor":{"x":14}}],[0.19171,{"cursor":{"x":0,"y":27}}],[0.009323999999999999,{"lines":{"27":[["Nothing                                                                         ",{}]],"28":[["TestParser>                                                                     ",{}]]},"cursor":{"x":12,"y":28}}],[1.630991,{"lines":{"28":[["TestParser> r                                                                   ",{}]]},"cursor":{"x":13}}],[0.057305,{"lines":{"28":[["TestParser> r1                                                                  ",{}]]},"cursor":{"x":14}}],[0.200676,{"cursor":{"x":0,"y":29}}],[0.00834,{"lines":{"29":[["Just (\":=\",\"1\")                                                                 ",{}]],"30":[["TestParser>                                                                     ",{}]]},"cursor":{"x":12,"y":30}}],[0.245253,{"lines":{"30":[["TestParser> r                                                                   ",{}]]},"cursor":{"x":13}}],[0.071691,{"lines":{"30":[["TestParser> r2                                                                  ",{}]]},"cursor":{"x":14}}],[0.152468,{"cursor":{"x":0,"y":31}}],[0.010141,{"lines":{"32":[["Program error: Expected else near then                                          ",{}]],"35":[["TestParser>                                                                     ",{}]]},"cursor":{"x":12,"y":35}}],[0.469583,{"lines":{"35":[["TestParser> a                                                                   ",{}]]},"cursor":{"x":13}}],[0.54431,{"lines":{"35":[["TestParser> a4                                                                  ",{}]]},"cursor":{"x":14}}],[0.439818,{"lines":{"35":[["TestParser> a44                                                                 ",{}]]},"cursor":{"x":15}}],[0.311769,{"lines":{"35":[["TestParser> a4                                                                  ",{}]]},"cursor":{"x":14}}],[0.231959,{"cursor":{"x":0,"y":36}}],[0.011018,{"lines":{"36":[["Just (\"count\",\"\")                                                               ",{}]],"37":[["TestParser>                                                                     ",{}]]},"cursor":{"x":12,"y":37}}],[2.56526,{"lines":{"37":[["TestParser> :                                                                   ",{}]]},"cursor":{"x":13}}],[0.74372,{"lines":{"37":[["TestParser> :l                                                                  ",{}]]},"cursor":{"x":14}}],[0.719948,{"cursor":{"x":15}}],[0.208318,{"lines":{"37":[["TestParser> :l T                                                                ",{}]]},"cursor":{"x":16}}],[0.560171,{"lines":{"37":[["TestParser> :l Test                                                             ",{}]]},"cursor":{"x":19}}],[0.8721680000000001,{"lines":{"37":[["TestParser> :l TestE                                                            ",{}]]},"cursor":{"x":20}}],[0.191032,{"lines":{"37":[["TestParser> :l TestExpr.hs                                                      ",{}]]},"cursor":{"x":27}}],[0.352262,{"cursor":{"x":0,"y":38}}],[0.009861999999999999,{"lines":{"38":[["TestExpr>                                                                       ",{}]]},"cursor":{"x":10}}],[4.495563,{"lines":{"38":[["TestExpr> n                                                                     ",{}]]},"cursor":{"x":11}}],[0.030146,{"lines":{"38":[["TestExpr> n1                                                                    ",{}]]},"cursor":{"x":12}}],[0.111754,{"cursor":{"x":0,"y":39}}],[0.012021,{"lines":{"0":[["__   __ __  __  ____   ___      _________________________________________       ",{}]],"1":[["||   || ||  || ||  || ||__      Hugs 98: Based on the Haskell 98 standard       ",{}]],"2":[["||___|| ||__|| ||__||  __||     Copyright (c) 1994-2005                         ",{}]],"3":[["||---||         ___||           World Wide Web: http://haskell.org/hugs         ",{}]],"4":[["||   ||                         Bugs: http://hackage.haskell.org/trac/hugs      ",{}]],"5":[["||   || Version: September 2006 _________________________________________       ",{}]],"6":[["                                                                                ",{}]],"7":[["Haskell 98 mode: Restart with command line option -98 to enable extensions      ",{}]],"8":[["                                                                                ",{}]],"9":[["Type :? for help                                                                ",{}]],"10":[["Hugs> :l TestParser.hs                                                          ",{}]],"11":[["TestParser> l1                                                                  ",{}]],"12":[["Just ('a',\"bc\")                                                                 ",{}]],"13":[["TestParser> l2                                                                  ",{}]],"14":[["Nothing                                                                         ",{}]],"15":[["TestParser> l3                                                                  ",{}]],"16":[["Nothing                                                                         ",{}]],"17":[["TestParser> w1                                                                  ",{}]],"18":[["Just (\"\",\"abc\")                                                                 ",{}]],"19":[["TestParser> w2                                                                  ",{}]],"20":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"21":[["TestParser> c1                                                                  ",{}]],"22":[["Just (\"ab\",\"c\")                                                                 ",{}]],"23":[["TestParser> c2                                                                  ",{}]],"24":[["Just (\"\",\"ab\")                                                                  ",{}]],"25":[["TestParser> c3                                                                  ",{}]],"26":[["Nothing                                                                         ",{}]],"27":[["TestParser> r1                                                                  ",{}]],"28":[["Just (\":=\",\"1\")                                                                 ",{}]],"29":[["TestParser> r2                                                                  ",{}]],"30":[["                                                                                ",{}]],"31":[["Program error: Expected else near then                                          ",{}]],"32":[["                                                                                ",{}]],"34":[["TestParser> a4                                                                  ",{}]],"35":[["Just (\"count\",\"\")                                                               ",{}]],"36":[["TestParser> :l TestExpr.hs                                                      ",{}]],"37":[["TestExpr> n1                                                                    ",{}]],"38":[["1                                                                               ",{}]],"39":[["TestExpr>                                                                       ",{}]]},"cursor":{"x":10}}],[0.636218,{"lines":{"39":[["TestExpr> n                                                                     ",{}]]},"cursor":{"x":11}}],[0.07979899999999999,{"lines":{"39":[["TestExpr> n2                                                                    ",{}]]},"cursor":{"x":12}}],[0.114419,{"lines":{"0":[["||   || ||  || ||  || ||__      Hugs 98: Based on the Haskell 98 standard       ",{}]],"1":[["||___|| ||__|| ||__||  __||     Copyright (c) 1994-2005                         ",{}]],"2":[["||---||         ___||           World Wide Web: http://haskell.org/hugs         ",{}]],"3":[["||   ||                         Bugs: http://hackage.haskell.org/trac/hugs      ",{}]],"4":[["||   || Version: September 2006 _________________________________________       ",{}]],"5":[["                                                                                ",{}]],"6":[["Haskell 98 mode: Restart with command line option -98 to enable extensions      ",{}]],"7":[["                                                                                ",{}]],"8":[["Type :? for help                                                                ",{}]],"9":[["Hugs> :l TestParser.hs                                                          ",{}]],"10":[["TestParser> l1                                                                  ",{}]],"11":[["Just ('a',\"bc\")                                                                 ",{}]],"12":[["TestParser> l2                                                                  ",{}]],"13":[["Nothing                                                                         ",{}]],"14":[["TestParser> l3                                                                  ",{}]],"15":[["Nothing                                                                         ",{}]],"16":[["TestParser> w1                                                                  ",{}]],"17":[["Just (\"\",\"abc\")                                                                 ",{}]],"18":[["TestParser> w2                                                                  ",{}]],"19":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"20":[["TestParser> c1                                                                  ",{}]],"21":[["Just (\"ab\",\"c\")                                                                 ",{}]],"22":[["TestParser> c2                                                                  ",{}]],"23":[["Just (\"\",\"ab\")                                                                  ",{}]],"24":[["TestParser> c3                                                                  ",{}]],"25":[["Nothing                                                                         ",{}]],"26":[["TestParser> r1                                                                  ",{}]],"27":[["Just (\":=\",\"1\")                                                                 ",{}]],"28":[["TestParser> r2                                                                  ",{}]],"29":[["                                                                                ",{}]],"30":[["Program error: Expected else near then                                          ",{}]],"31":[["                                                                                ",{}]],"33":[["TestParser> a4                                                                  ",{}]],"34":[["Just (\"count\",\"\")                                                               ",{}]],"35":[["TestParser> :l TestExpr.hs                                                      ",{}]],"36":[["TestExpr> n1                                                                    ",{}]],"37":[["1                                                                               ",{}]],"38":[["TestExpr> n2                                                                    ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.009280999999999999,{"lines":{"0":[["||___|| ||__|| ||__||  __||     Copyright (c) 1994-2005                         ",{}]],"1":[["||---||         ___||           World Wide Web: http://haskell.org/hugs         ",{}]],"2":[["||   ||                         Bugs: http://hackage.haskell.org/trac/hugs      ",{}]],"3":[["||   || Version: September 2006 _________________________________________       ",{}]],"4":[["                                                                                ",{}]],"5":[["Haskell 98 mode: Restart with command line option -98 to enable extensions      ",{}]],"6":[["                                                                                ",{}]],"7":[["Type :? for help                                                                ",{}]],"8":[["Hugs> :l TestParser.hs                                                          ",{}]],"9":[["TestParser> l1                                                                  ",{}]],"10":[["Just ('a',\"bc\")                                                                 ",{}]],"11":[["TestParser> l2                                                                  ",{}]],"12":[["Nothing                                                                         ",{}]],"13":[["TestParser> l3                                                                  ",{}]],"14":[["Nothing                                                                         ",{}]],"15":[["TestParser> w1                                                                  ",{}]],"16":[["Just (\"\",\"abc\")                                                                 ",{}]],"17":[["TestParser> w2                                                                  ",{}]],"18":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"19":[["TestParser> c1                                                                  ",{}]],"20":[["Just (\"ab\",\"c\")                                                                 ",{}]],"21":[["TestParser> c2                                                                  ",{}]],"22":[["Just (\"\",\"ab\")                                                                  ",{}]],"23":[["TestParser> c3                                                                  ",{}]],"24":[["Nothing                                                                         ",{}]],"25":[["TestParser> r1                                                                  ",{}]],"26":[["Just (\":=\",\"1\")                                                                 ",{}]],"27":[["TestParser> r2                                                                  ",{}]],"28":[["                                                                                ",{}]],"29":[["Program error: Expected else near then                                          ",{}]],"30":[["                                                                                ",{}]],"32":[["TestParser> a4                                                                  ",{}]],"33":[["Just (\"count\",\"\")                                                               ",{}]],"34":[["TestParser> :l TestExpr.hs                                                      ",{}]],"35":[["TestExpr> n1                                                                    ",{}]],"36":[["1                                                                               ",{}]],"37":[["TestExpr> n2                                                                    ",{}]],"38":[["1                                                                               ",{}]],"39":[["TestExpr>                                                                       ",{}]]},"cursor":{"x":10}}],[0.220361,{"lines":{"39":[["TestExpr> n                                                                     ",{}]]},"cursor":{"x":11}}],[0.087961,{"lines":{"39":[["TestExpr> n3                                                                    ",{}]]},"cursor":{"x":12}}],[0.103879,{"lines":{"0":[["||---||         ___||           World Wide Web: http://haskell.org/hugs         ",{}]],"1":[["||   ||                         Bugs: http://hackage.haskell.org/trac/hugs      ",{}]],"2":[["||   || Version: September 2006 _________________________________________       ",{}]],"3":[["                                                                                ",{}]],"4":[["Haskell 98 mode: Restart with command line option -98 to enable extensions      ",{}]],"5":[["                                                                                ",{}]],"6":[["Type :? for help                                                                ",{}]],"7":[["Hugs> :l TestParser.hs                                                          ",{}]],"8":[["TestParser> l1                                                                  ",{}]],"9":[["Just ('a',\"bc\")                                                                 ",{}]],"10":[["TestParser> l2                                                                  ",{}]],"11":[["Nothing                                                                         ",{}]],"12":[["TestParser> l3                                                                  ",{}]],"13":[["Nothing                                                                         ",{}]],"14":[["TestParser> w1                                                                  ",{}]],"15":[["Just (\"\",\"abc\")                                                                 ",{}]],"16":[["TestParser> w2                                                                  ",{}]],"17":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"18":[["TestParser> c1                                                                  ",{}]],"19":[["Just (\"ab\",\"c\")                                                                 ",{}]],"20":[["TestParser> c2                                                                  ",{}]],"21":[["Just (\"\",\"ab\")                                                                  ",{}]],"22":[["TestParser> c3                                                                  ",{}]],"23":[["Nothing                                                                         ",{}]],"24":[["TestParser> r1                                                                  ",{}]],"25":[["Just (\":=\",\"1\")                                                                 ",{}]],"26":[["TestParser> r2                                                                  ",{}]],"27":[["                                                                                ",{}]],"28":[["Program error: Expected else near then                                          ",{}]],"29":[["                                                                                ",{}]],"31":[["TestParser> a4                                                                  ",{}]],"32":[["Just (\"count\",\"\")                                                               ",{}]],"33":[["TestParser> :l TestExpr.hs                                                      ",{}]],"34":[["TestExpr> n1                                                                    ",{}]],"35":[["1                                                                               ",{}]],"36":[["TestExpr> n2                                                                    ",{}]],"37":[["1                                                                               ",{}]],"38":[["TestExpr> n3                                                                    ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.011601,{"lines":{"0":[["||   ||                         Bugs: http://hackage.haskell.org/trac/hugs      ",{}]],"1":[["||   || Version: September 2006 _________________________________________       ",{}]],"2":[["                                                                                ",{}]],"3":[["Haskell 98 mode: Restart with command line option -98 to enable extensions      ",{}]],"4":[["                                                                                ",{}]],"5":[["Type :? for help                                                                ",{}]],"6":[["Hugs> :l TestParser.hs                                                          ",{}]],"7":[["TestParser> l1                                                                  ",{}]],"8":[["Just ('a',\"bc\")                                                                 ",{}]],"9":[["TestParser> l2                                                                  ",{}]],"10":[["Nothing                                                                         ",{}]],"11":[["TestParser> l3                                                                  ",{}]],"12":[["Nothing                                                                         ",{}]],"13":[["TestParser> w1                                                                  ",{}]],"14":[["Just (\"\",\"abc\")                                                                 ",{}]],"15":[["TestParser> w2                                                                  ",{}]],"16":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"17":[["TestParser> c1                                                                  ",{}]],"18":[["Just (\"ab\",\"c\")                                                                 ",{}]],"19":[["TestParser> c2                                                                  ",{}]],"20":[["Just (\"\",\"ab\")                                                                  ",{}]],"21":[["TestParser> c3                                                                  ",{}]],"22":[["Nothing                                                                         ",{}]],"23":[["TestParser> r1                                                                  ",{}]],"24":[["Just (\":=\",\"1\")                                                                 ",{}]],"25":[["TestParser> r2                                                                  ",{}]],"26":[["                                                                                ",{}]],"27":[["Program error: Expected else near then                                          ",{}]],"28":[["                                                                                ",{}]],"30":[["TestParser> a4                                                                  ",{}]],"31":[["Just (\"count\",\"\")                                                               ",{}]],"32":[["TestParser> :l TestExpr.hs                                                      ",{}]],"33":[["TestExpr> n1                                                                    ",{}]],"34":[["1                                                                               ",{}]],"35":[["TestExpr> n2                                                                    ",{}]],"36":[["1                                                                               ",{}]],"37":[["TestExpr> n3                                                                    ",{}]],"38":[["3                                                                               ",{}]],"39":[["TestExpr>                                                                       ",{}]]},"cursor":{"x":10}}],[0.182763,{"lines":{"39":[["TestExpr> n                                                                     ",{}]]},"cursor":{"x":11}}],[0.102515,{"lines":{"39":[["TestExpr> n4                                                                    ",{}]]},"cursor":{"x":12}}],[0.127548,{"lines":{"0":[["||   || Version: September 2006 _________________________________________       ",{}]],"1":[["                                                                                ",{}]],"2":[["Haskell 98 mode: Restart with command line option -98 to enable extensions      ",{}]],"3":[["                                                                                ",{}]],"4":[["Type :? for help                                                                ",{}]],"5":[["Hugs> :l TestParser.hs                                                          ",{}]],"6":[["TestParser> l1                                                                  ",{}]],"7":[["Just ('a',\"bc\")                                                                 ",{}]],"8":[["TestParser> l2                                                                  ",{}]],"9":[["Nothing                                                                         ",{}]],"10":[["TestParser> l3                                                                  ",{}]],"11":[["Nothing                                                                         ",{}]],"12":[["TestParser> w1                                                                  ",{}]],"13":[["Just (\"\",\"abc\")                                                                 ",{}]],"14":[["TestParser> w2                                                                  ",{}]],"15":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"16":[["TestParser> c1                                                                  ",{}]],"17":[["Just (\"ab\",\"c\")                                                                 ",{}]],"18":[["TestParser> c2                                                                  ",{}]],"19":[["Just (\"\",\"ab\")                                                                  ",{}]],"20":[["TestParser> c3                                                                  ",{}]],"21":[["Nothing                                                                         ",{}]],"22":[["TestParser> r1                                                                  ",{}]],"23":[["Just (\":=\",\"1\")                                                                 ",{}]],"24":[["TestParser> r2                                                                  ",{}]],"25":[["                                                                                ",{}]],"26":[["Program error: Expected else near then                                          ",{}]],"27":[["                                                                                ",{}]],"29":[["TestParser> a4                                                                  ",{}]],"30":[["Just (\"count\",\"\")                                                               ",{}]],"31":[["TestParser> :l TestExpr.hs                                                      ",{}]],"32":[["TestExpr> n1                                                                    ",{}]],"33":[["1                                                                               ",{}]],"34":[["TestExpr> n2                                                                    ",{}]],"35":[["1                                                                               ",{}]],"36":[["TestExpr> n3                                                                    ",{}]],"37":[["3                                                                               ",{}]],"38":[["TestExpr> n4                                                                    ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.012436,{"lines":{"0":[["                                                                                ",{}]],"1":[["Haskell 98 mode: Restart with command line option -98 to enable extensions      ",{}]],"2":[["                                                                                ",{}]],"3":[["Type :? for help                                                                ",{}]],"4":[["Hugs> :l TestParser.hs                                                          ",{}]],"5":[["TestParser> l1                                                                  ",{}]],"6":[["Just ('a',\"bc\")                                                                 ",{}]],"7":[["TestParser> l2                                                                  ",{}]],"8":[["Nothing                                                                         ",{}]],"9":[["TestParser> l3                                                                  ",{}]],"10":[["Nothing                                                                         ",{}]],"11":[["TestParser> w1                                                                  ",{}]],"12":[["Just (\"\",\"abc\")                                                                 ",{}]],"13":[["TestParser> w2                                                                  ",{}]],"14":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"15":[["TestParser> c1                                                                  ",{}]],"16":[["Just (\"ab\",\"c\")                                                                 ",{}]],"17":[["TestParser> c2                                                                  ",{}]],"18":[["Just (\"\",\"ab\")                                                                  ",{}]],"19":[["TestParser> c3                                                                  ",{}]],"20":[["Nothing                                                                         ",{}]],"21":[["TestParser> r1                                                                  ",{}]],"22":[["Just (\":=\",\"1\")                                                                 ",{}]],"23":[["TestParser> r2                                                                  ",{}]],"24":[["                                                                                ",{}]],"25":[["Program error: Expected else near then                                          ",{}]],"26":[["                                                                                ",{}]],"28":[["TestParser> a4                                                                  ",{}]],"29":[["Just (\"count\",\"\")                                                               ",{}]],"30":[["TestParser> :l TestExpr.hs                                                      ",{}]],"31":[["TestExpr> n1                                                                    ",{}]],"32":[["1                                                                               ",{}]],"33":[["TestExpr> n2                                                                    ",{}]],"34":[["1                                                                               ",{}]],"35":[["TestExpr> n3                                                                    ",{}]],"36":[["3                                                                               ",{}]],"37":[["TestExpr> n4                                                                    ",{}]],"38":[["-3                                                                              ",{}]],"39":[["TestExpr>                                                                       ",{}]]},"cursor":{"x":10}}],[0.608067,{"lines":{"39":[["TestExpr> n                                                                     ",{}]]},"cursor":{"x":11}}],[0.307003,{"lines":{"39":[["TestExpr> n2                                                                    ",{}]]},"cursor":{"x":12}}],[0.088154,{"lines":{"39":[["TestExpr> n21                                                                   ",{}]]},"cursor":{"x":13}}],[0.288505,{"lines":{"0":[["Haskell 98 mode: Restart with command line option -98 to enable extensions      ",{}]],"1":[["                                                                                ",{}]],"2":[["Type :? for help                                                                ",{}]],"3":[["Hugs> :l TestParser.hs                                                          ",{}]],"4":[["TestParser> l1                                                                  ",{}]],"5":[["Just ('a',\"bc\")                                                                 ",{}]],"6":[["TestParser> l2                                                                  ",{}]],"7":[["Nothing                                                                         ",{}]],"8":[["TestParser> l3                                                                  ",{}]],"9":[["Nothing                                                                         ",{}]],"10":[["TestParser> w1                                                                  ",{}]],"11":[["Just (\"\",\"abc\")                                                                 ",{}]],"12":[["TestParser> w2                                                                  ",{}]],"13":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"14":[["TestParser> c1                                                                  ",{}]],"15":[["Just (\"ab\",\"c\")                                                                 ",{}]],"16":[["TestParser> c2                                                                  ",{}]],"17":[["Just (\"\",\"ab\")                                                                  ",{}]],"18":[["TestParser> c3                                                                  ",{}]],"19":[["Nothing                                                                         ",{}]],"20":[["TestParser> r1                                                                  ",{}]],"21":[["Just (\":=\",\"1\")                                                                 ",{}]],"22":[["TestParser> r2                                                                  ",{}]],"23":[["                                                                                ",{}]],"24":[["Program error: Expected else near then                                          ",{}]],"25":[["                                                                                ",{}]],"27":[["TestParser> a4                                                                  ",{}]],"28":[["Just (\"count\",\"\")                                                               ",{}]],"29":[["TestParser> :l TestExpr.hs                                                      ",{}]],"30":[["TestExpr> n1                                                                    ",{}]],"31":[["1                                                                               ",{}]],"32":[["TestExpr> n2                                                                    ",{}]],"33":[["1                                                                               ",{}]],"34":[["TestExpr> n3                                                                    ",{}]],"35":[["3                                                                               ",{}]],"36":[["TestExpr> n4                                                                    ",{}]],"37":[["-3                                                                              ",{}]],"38":[["TestExpr> n21                                                                   ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.005637,{"lines":{"0":[["Hugs> :l TestParser.hs                                                          ",{}]],"1":[["TestParser> l1                                                                  ",{}]],"2":[["Just ('a',\"bc\")                                                                 ",{}]],"3":[["TestParser> l2                                                                  ",{}]],"4":[["Nothing                                                                         ",{}]],"5":[["TestParser> l3                                                                  ",{}]],"6":[["Nothing                                                                         ",{}]],"7":[["TestParser> w1                                                                  ",{}]],"8":[["Just (\"\",\"abc\")                                                                 ",{}]],"9":[["TestParser> w2                                                                  ",{}]],"10":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"11":[["TestParser> c1                                                                  ",{}]],"12":[["Just (\"ab\",\"c\")                                                                 ",{}]],"13":[["TestParser> c2                                                                  ",{}]],"14":[["Just (\"\",\"ab\")                                                                  ",{}]],"15":[["TestParser> c3                                                                  ",{}]],"16":[["Nothing                                                                         ",{}]],"17":[["TestParser> r1                                                                  ",{}]],"18":[["Just (\":=\",\"1\")                                                                 ",{}]],"19":[["TestParser> r2                                                                  ",{}]],"20":[["                                                                                ",{}]],"21":[["Program error: Expected else near then                                          ",{}]],"22":[["                                                                                ",{}]],"24":[["TestParser> a4                                                                  ",{}]],"25":[["Just (\"count\",\"\")                                                               ",{}]],"26":[["TestParser> :l TestExpr.hs                                                      ",{}]],"27":[["TestExpr> n1                                                                    ",{}]],"28":[["1                                                                               ",{}]],"29":[["TestExpr> n2                                                                    ",{}]],"30":[["1                                                                               ",{}]],"31":[["TestExpr> n3                                                                    ",{}]],"32":[["3                                                                               ",{}]],"33":[["TestExpr> n4                                                                    ",{}]],"34":[["-3                                                                              ",{}]],"35":[["TestExpr> n21                                                                   ",{}]],"36":[["                                                                                ",{}]],"37":[["Program error: Expr.value: division by 0                                        ",{}]],"38":[["                                                                                ",{}]]}}],[0.013194,{"lines":{"39":[["TestExpr>                                                                       ",{}]]},"cursor":{"x":10}}],[0.508993,{"lines":{"39":[["TestExpr> n                                                                     ",{}]]},"cursor":{"x":11}}],[0.488066,{"lines":{"39":[["TestExpr> n3                                                                    ",{}]]},"cursor":{"x":12}}],[0.09558899999999999,{"lines":{"39":[["TestExpr> n32                                                                   ",{}]]},"cursor":{"x":13}}],[0.375867,{"lines":{"39":[["TestExpr> n3                                                                    ",{}]]},"cursor":{"x":12}}],[0.01606,{"lines":{"39":[["TestExpr> n31                                                                   ",{}]]},"cursor":{"x":13}}],[0.6242490000000001,{"lines":{"0":[["TestParser> l1                                                                  ",{}]],"1":[["Just ('a',\"bc\")                                                                 ",{}]],"2":[["TestParser> l2                                                                  ",{}]],"3":[["Nothing                                                                         ",{}]],"4":[["TestParser> l3                                                                  ",{}]],"5":[["Nothing                                                                         ",{}]],"6":[["TestParser> w1                                                                  ",{}]],"7":[["Just (\"\",\"abc\")                                                                 ",{}]],"8":[["TestParser> w2                                                                  ",{}]],"9":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"10":[["TestParser> c1                                                                  ",{}]],"11":[["Just (\"ab\",\"c\")                                                                 ",{}]],"12":[["TestParser> c2                                                                  ",{}]],"13":[["Just (\"\",\"ab\")                                                                  ",{}]],"14":[["TestParser> c3                                                                  ",{}]],"15":[["Nothing                                                                         ",{}]],"16":[["TestParser> r1                                                                  ",{}]],"17":[["Just (\":=\",\"1\")                                                                 ",{}]],"18":[["TestParser> r2                                                                  ",{}]],"19":[["                                                                                ",{}]],"20":[["Program error: Expected else near then                                          ",{}]],"21":[["                                                                                ",{}]],"23":[["TestParser> a4                                                                  ",{}]],"24":[["Just (\"count\",\"\")                                                               ",{}]],"25":[["TestParser> :l TestExpr.hs                                                      ",{}]],"26":[["TestExpr> n1                                                                    ",{}]],"27":[["1                                                                               ",{}]],"28":[["TestExpr> n2                                                                    ",{}]],"29":[["1                                                                               ",{}]],"30":[["TestExpr> n3                                                                    ",{}]],"31":[["3                                                                               ",{}]],"32":[["TestExpr> n4                                                                    ",{}]],"33":[["-3                                                                              ",{}]],"34":[["TestExpr> n21                                                                   ",{}]],"35":[["                                                                                ",{}]],"36":[["Program error: Expr.value: division by 0                                        ",{}]],"37":[["                                                                                ",{}]],"38":[["TestExpr> n31                                                                   ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.013913,{"lines":{"0":[["Nothing                                                                         ",{}]],"1":[["TestParser> l3                                                                  ",{}]],"2":[["Nothing                                                                         ",{}]],"3":[["TestParser> w1                                                                  ",{}]],"4":[["Just (\"\",\"abc\")                                                                 ",{}]],"5":[["TestParser> w2                                                                  ",{}]],"6":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"7":[["TestParser> c1                                                                  ",{}]],"8":[["Just (\"ab\",\"c\")                                                                 ",{}]],"9":[["TestParser> c2                                                                  ",{}]],"10":[["Just (\"\",\"ab\")                                                                  ",{}]],"11":[["TestParser> c3                                                                  ",{}]],"12":[["Nothing                                                                         ",{}]],"13":[["TestParser> r1                                                                  ",{}]],"14":[["Just (\":=\",\"1\")                                                                 ",{}]],"15":[["TestParser> r2                                                                  ",{}]],"16":[["                                                                                ",{}]],"17":[["Program error: Expected else near then                                          ",{}]],"18":[["                                                                                ",{}]],"20":[["TestParser> a4                                                                  ",{}]],"21":[["Just (\"count\",\"\")                                                               ",{}]],"22":[["TestParser> :l TestExpr.hs                                                      ",{}]],"23":[["TestExpr> n1                                                                    ",{}]],"24":[["1                                                                               ",{}]],"25":[["TestExpr> n2                                                                    ",{}]],"26":[["1                                                                               ",{}]],"27":[["TestExpr> n3                                                                    ",{}]],"28":[["3                                                                               ",{}]],"29":[["TestExpr> n4                                                                    ",{}]],"30":[["-3                                                                              ",{}]],"31":[["TestExpr> n21                                                                   ",{}]],"32":[["                                                                                ",{}]],"33":[["Program error: Expr.value: division by 0                                        ",{}]],"34":[["                                                                                ",{}]],"35":[["TestExpr> n31                                                                   ",{}]],"36":[["                                                                                ",{}]],"37":[["Program error: Expr.value: undefined variable z                                 ",{}]],"38":[["                                                                                ",{}]],"39":[["TestExpr>                                                                       ",{}]]},"cursor":{"x":10}}],[4.449735,{"lines":{"39":[["TestExpr> :                                                                     ",{}]]},"cursor":{"x":11}}],[0.183791,{"lines":{"39":[["TestExpr> :l                                                                    ",{}]]},"cursor":{"x":12}}],[0.463775,{"cursor":{"x":13}}],[0.376553,{"lines":{"39":[["TestExpr> :l T                                                                  ",{}]]},"cursor":{"x":14}}],[0.167386,{"lines":{"39":[["TestExpr> :l Test                                                               ",{}]]},"cursor":{"x":17}}],[0.400289,{"lines":{"39":[["TestExpr> :l TestS                                                              ",{}]]},"cursor":{"x":18}}],[0.167713,{"lines":{"39":[["TestExpr> :l TestStatement.hs                                                   ",{}]]},"cursor":{"x":30}}],[0.6401210000000001,{"lines":{"0":[["TestParser> l3                                                                  ",{}]],"1":[["Nothing                                                                         ",{}]],"2":[["TestParser> w1                                                                  ",{}]],"3":[["Just (\"\",\"abc\")                                                                 ",{}]],"4":[["TestParser> w2                                                                  ",{}]],"5":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"6":[["TestParser> c1                                                                  ",{}]],"7":[["Just (\"ab\",\"c\")                                                                 ",{}]],"8":[["TestParser> c2                                                                  ",{}]],"9":[["Just (\"\",\"ab\")                                                                  ",{}]],"10":[["TestParser> c3                                                                  ",{}]],"11":[["Nothing                                                                         ",{}]],"12":[["TestParser> r1                                                                  ",{}]],"13":[["Just (\":=\",\"1\")                                                                 ",{}]],"14":[["TestParser> r2                                                                  ",{}]],"15":[["                                                                                ",{}]],"16":[["Program error: Expected else near then                                          ",{}]],"17":[["                                                                                ",{}]],"19":[["TestParser> a4                                                                  ",{}]],"20":[["Just (\"count\",\"\")                                                               ",{}]],"21":[["TestParser> :l TestExpr.hs                                                      ",{}]],"22":[["TestExpr> n1                                                                    ",{}]],"23":[["1                                                                               ",{}]],"24":[["TestExpr> n2                                                                    ",{}]],"25":[["1                                                                               ",{}]],"26":[["TestExpr> n3                                                                    ",{}]],"27":[["3                                                                               ",{}]],"28":[["TestExpr> n4                                                                    ",{}]],"29":[["-3                                                                              ",{}]],"30":[["TestExpr> n21                                                                   ",{}]],"31":[["                                                                                ",{}]],"32":[["Program error: Expr.value: division by 0                                        ",{}]],"33":[["                                                                                ",{}]],"34":[["TestExpr> n31                                                                   ",{}]],"35":[["                                                                                ",{}]],"36":[["Program error: Expr.value: undefined variable z                                 ",{}]],"37":[["                                                                                ",{}]],"38":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.01166,{"lines":{"39":[["TestStatement>                                                                  ",{}]]},"cursor":{"x":15}}],[2.436142,{"lines":{"39":[["TestStatement> p                                                                ",{}]]},"cursor":{"x":16}}],[0.080344,{"lines":{"39":[["TestStatement> p1                                                               ",{}]]},"cursor":{"x":17}}],[0.112984,{"lines":{"0":[["Nothing                                                                         ",{}]],"1":[["TestParser> w1                                                                  ",{}]],"2":[["Just (\"\",\"abc\")                                                                 ",{}]],"3":[["TestParser> w2                                                                  ",{}]],"4":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"5":[["TestParser> c1                                                                  ",{}]],"6":[["Just (\"ab\",\"c\")                                                                 ",{}]],"7":[["TestParser> c2                                                                  ",{}]],"8":[["Just (\"\",\"ab\")                                                                  ",{}]],"9":[["TestParser> c3                                                                  ",{}]],"10":[["Nothing                                                                         ",{}]],"11":[["TestParser> r1                                                                  ",{}]],"12":[["Just (\":=\",\"1\")                                                                 ",{}]],"13":[["TestParser> r2                                                                  ",{}]],"14":[["                                                                                ",{}]],"15":[["Program error: Expected else near then                                          ",{}]],"16":[["                                                                                ",{}]],"18":[["TestParser> a4                                                                  ",{}]],"19":[["Just (\"count\",\"\")                                                               ",{}]],"20":[["TestParser> :l TestExpr.hs                                                      ",{}]],"21":[["TestExpr> n1                                                                    ",{}]],"22":[["1                                                                               ",{}]],"23":[["TestExpr> n2                                                                    ",{}]],"24":[["1                                                                               ",{}]],"25":[["TestExpr> n3                                                                    ",{}]],"26":[["3                                                                               ",{}]],"27":[["TestExpr> n4                                                                    ",{}]],"28":[["-3                                                                              ",{}]],"29":[["TestExpr> n21                                                                   ",{}]],"30":[["                                                                                ",{}]],"31":[["Program error: Expr.value: division by 0                                        ",{}]],"32":[["                                                                                ",{}]],"33":[["TestExpr> n31                                                                   ",{}]],"34":[["                                                                                ",{}]],"35":[["Program error: Expr.value: undefined variable z                                 ",{}]],"36":[["                                                                                ",{}]],"37":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"38":[["TestStatement> p1                                                               ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.01053,{"lines":{"0":[["TestParser> w1                                                                  ",{}]],"1":[["Just (\"\",\"abc\")                                                                 ",{}]],"2":[["TestParser> w2                                                                  ",{}]],"3":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"4":[["TestParser> c1                                                                  ",{}]],"5":[["Just (\"ab\",\"c\")                                                                 ",{}]],"6":[["TestParser> c2                                                                  ",{}]],"7":[["Just (\"\",\"ab\")                                                                  ",{}]],"8":[["TestParser> c3                                                                  ",{}]],"9":[["Nothing                                                                         ",{}]],"10":[["TestParser> r1                                                                  ",{}]],"11":[["Just (\":=\",\"1\")                                                                 ",{}]],"12":[["TestParser> r2                                                                  ",{}]],"13":[["                                                                                ",{}]],"14":[["Program error: Expected else near then                                          ",{}]],"15":[["                                                                                ",{}]],"17":[["TestParser> a4                                                                  ",{}]],"18":[["Just (\"count\",\"\")                                                               ",{}]],"19":[["TestParser> :l TestExpr.hs                                                      ",{}]],"20":[["TestExpr> n1                                                                    ",{}]],"21":[["1                                                                               ",{}]],"22":[["TestExpr> n2                                                                    ",{}]],"23":[["1                                                                               ",{}]],"24":[["TestExpr> n3                                                                    ",{}]],"25":[["3                                                                               ",{}]],"26":[["TestExpr> n4                                                                    ",{}]],"27":[["-3                                                                              ",{}]],"28":[["TestExpr> n21                                                                   ",{}]],"29":[["                                                                                ",{}]],"30":[["Program error: Expr.value: division by 0                                        ",{}]],"31":[["                                                                                ",{}]],"32":[["TestExpr> n31                                                                   ",{}]],"33":[["                                                                                ",{}]],"34":[["Program error: Expr.value: undefined variable z                                 ",{}]],"35":[["                                                                                ",{}]],"36":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"37":[["TestStatement> p1                                                               ",{}]],"38":[["Skip                                                                            ",{}]],"39":[["TestStatement>                                                                  ",{}]]},"cursor":{"x":15}}],[0.291886,{"lines":{"39":[["TestStatement> p                                                                ",{}]]},"cursor":{"x":16}}],[0.056359,{"lines":{"39":[["TestStatement> p2                                                               ",{}]]},"cursor":{"x":17}}],[0.167885,{"lines":{"0":[["Just (\"\",\"abc\")                                                                 ",{}]],"1":[["TestParser> w2                                                                  ",{}]],"2":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"3":[["TestParser> c1                                                                  ",{}]],"4":[["Just (\"ab\",\"c\")                                                                 ",{}]],"5":[["TestParser> c2                                                                  ",{}]],"6":[["Just (\"\",\"ab\")                                                                  ",{}]],"7":[["TestParser> c3                                                                  ",{}]],"8":[["Nothing                                                                         ",{}]],"9":[["TestParser> r1                                                                  ",{}]],"10":[["Just (\":=\",\"1\")                                                                 ",{}]],"11":[["TestParser> r2                                                                  ",{}]],"12":[["                                                                                ",{}]],"13":[["Program error: Expected else near then                                          ",{}]],"14":[["                                                                                ",{}]],"16":[["TestParser> a4                                                                  ",{}]],"17":[["Just (\"count\",\"\")                                                               ",{}]],"18":[["TestParser> :l TestExpr.hs                                                      ",{}]],"19":[["TestExpr> n1                                                                    ",{}]],"20":[["1                                                                               ",{}]],"21":[["TestExpr> n2                                                                    ",{}]],"22":[["1                                                                               ",{}]],"23":[["TestExpr> n3                                                                    ",{}]],"24":[["3                                                                               ",{}]],"25":[["TestExpr> n4                                                                    ",{}]],"26":[["-3                                                                              ",{}]],"27":[["TestExpr> n21                                                                   ",{}]],"28":[["                                                                                ",{}]],"29":[["Program error: Expr.value: division by 0                                        ",{}]],"30":[["                                                                                ",{}]],"31":[["TestExpr> n31                                                                   ",{}]],"32":[["                                                                                ",{}]],"33":[["Program error: Expr.value: undefined variable z                                 ",{}]],"34":[["                                                                                ",{}]],"35":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"36":[["TestStatement> p1                                                               ",{}]],"37":[["Skip                                                                            ",{}]],"38":[["TestStatement> p2                                                               ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.0124,{"lines":{"0":[["TestParser> w2                                                                  ",{}]],"1":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"2":[["TestParser> c1                                                                  ",{}]],"3":[["Just (\"ab\",\"c\")                                                                 ",{}]],"4":[["TestParser> c2                                                                  ",{}]],"5":[["Just (\"\",\"ab\")                                                                  ",{}]],"6":[["TestParser> c3                                                                  ",{}]],"7":[["Nothing                                                                         ",{}]],"8":[["TestParser> r1                                                                  ",{}]],"9":[["Just (\":=\",\"1\")                                                                 ",{}]],"10":[["TestParser> r2                                                                  ",{}]],"11":[["                                                                                ",{}]],"12":[["Program error: Expected else near then                                          ",{}]],"13":[["                                                                                ",{}]],"15":[["TestParser> a4                                                                  ",{}]],"16":[["Just (\"count\",\"\")                                                               ",{}]],"17":[["TestParser> :l TestExpr.hs                                                      ",{}]],"18":[["TestExpr> n1                                                                    ",{}]],"19":[["1                                                                               ",{}]],"20":[["TestExpr> n2                                                                    ",{}]],"21":[["1                                                                               ",{}]],"22":[["TestExpr> n3                                                                    ",{}]],"23":[["3                                                                               ",{}]],"24":[["TestExpr> n4                                                                    ",{}]],"25":[["-3                                                                              ",{}]],"26":[["TestExpr> n21                                                                   ",{}]],"27":[["                                                                                ",{}]],"28":[["Program error: Expr.value: division by 0                                        ",{}]],"29":[["                                                                                ",{}]],"30":[["TestExpr> n31                                                                   ",{}]],"31":[["                                                                                ",{}]],"32":[["Program error: Expr.value: undefined variable z                                 ",{}]],"33":[["                                                                                ",{}]],"34":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"35":[["TestStatement> p1                                                               ",{}]],"36":[["Skip                                                                            ",{}]],"37":[["TestStatement> p2                                                               ",{}]],"38":[["Read \"count\"                                                                    ",{}]],"39":[["TestStatement>                                                                  ",{}]]},"cursor":{"x":15}}],[0.81943,{"lines":{"39":[["TestStatement> p                                                                ",{}]]},"cursor":{"x":16}}],[0.113039,{"lines":{"39":[["TestStatement> p3                                                               ",{}]]},"cursor":{"x":17}}],[0.128607,{"lines":{"0":[["Just (\"  \\t \",\"abc\")                                                            ",{}]],"1":[["TestParser> c1                                                                  ",{}]],"2":[["Just (\"ab\",\"c\")                                                                 ",{}]],"3":[["TestParser> c2                                                                  ",{}]],"4":[["Just (\"\",\"ab\")                                                                  ",{}]],"5":[["TestParser> c3                                                                  ",{}]],"6":[["Nothing                                                                         ",{}]],"7":[["TestParser> r1                                                                  ",{}]],"8":[["Just (\":=\",\"1\")                                                                 ",{}]],"9":[["TestParser> r2                                                                  ",{}]],"10":[["                                                                                ",{}]],"11":[["Program error: Expected else near then                                          ",{}]],"12":[["                                                                                ",{}]],"14":[["TestParser> a4                                                                  ",{}]],"15":[["Just (\"count\",\"\")                                                               ",{}]],"16":[["TestParser> :l TestExpr.hs                                                      ",{}]],"17":[["TestExpr> n1                                                                    ",{}]],"18":[["1                                                                               ",{}]],"19":[["TestExpr> n2                                                                    ",{}]],"20":[["1                                                                               ",{}]],"21":[["TestExpr> n3                                                                    ",{}]],"22":[["3                                                                               ",{}]],"23":[["TestExpr> n4                                                                    ",{}]],"24":[["-3                                                                              ",{}]],"25":[["TestExpr> n21                                                                   ",{}]],"26":[["                                                                                ",{}]],"27":[["Program error: Expr.value: division by 0                                        ",{}]],"28":[["                                                                                ",{}]],"29":[["TestExpr> n31                                                                   ",{}]],"30":[["                                                                                ",{}]],"31":[["Program error: Expr.value: undefined variable z                                 ",{}]],"32":[["                                                                                ",{}]],"33":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"34":[["TestStatement> p1                                                               ",{}]],"35":[["Skip                                                                            ",{}]],"36":[["TestStatement> p2                                                               ",{}]],"37":[["Read \"count\"                                                                    ",{}]],"38":[["TestStatement> p3                                                               ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.010817,{"lines":{"0":[["TestParser> c1                                                                  ",{}]],"1":[["Just (\"ab\",\"c\")                                                                 ",{}]],"2":[["TestParser> c2                                                                  ",{}]],"3":[["Just (\"\",\"ab\")                                                                  ",{}]],"4":[["TestParser> c3                                                                  ",{}]],"5":[["Nothing                                                                         ",{}]],"6":[["TestParser> r1                                                                  ",{}]],"7":[["Just (\":=\",\"1\")                                                                 ",{}]],"8":[["TestParser> r2                                                                  ",{}]],"9":[["                                                                                ",{}]],"10":[["Program error: Expected else near then                                          ",{}]],"11":[["                                                                                ",{}]],"13":[["TestParser> a4                                                                  ",{}]],"14":[["Just (\"count\",\"\")                                                               ",{}]],"15":[["TestParser> :l TestExpr.hs                                                      ",{}]],"16":[["TestExpr> n1                                                                    ",{}]],"17":[["1                                                                               ",{}]],"18":[["TestExpr> n2                                                                    ",{}]],"19":[["1                                                                               ",{}]],"20":[["TestExpr> n3                                                                    ",{}]],"21":[["3                                                                               ",{}]],"22":[["TestExpr> n4                                                                    ",{}]],"23":[["-3                                                                              ",{}]],"24":[["TestExpr> n21                                                                   ",{}]],"25":[["                                                                                ",{}]],"26":[["Program error: Expr.value: division by 0                                        ",{}]],"27":[["                                                                                ",{}]],"28":[["TestExpr> n31                                                                   ",{}]],"29":[["                                                                                ",{}]],"30":[["Program error: Expr.value: undefined variable z                                 ",{}]],"31":[["                                                                                ",{}]],"32":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"33":[["TestStatement> p1                                                               ",{}]],"34":[["Skip                                                                            ",{}]],"35":[["TestStatement> p2                                                               ",{}]],"36":[["Read \"count\"                                                                    ",{}]],"37":[["TestStatement> p3                                                               ",{}]],"38":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"39":[["TestStatement>                                                                  ",{}]]},"cursor":{"x":15}}],[0.227493,{"lines":{"39":[["TestStatement> p                                                                ",{}]]},"cursor":{"x":16}}],[0.119902,{"lines":{"39":[["TestStatement> p4                                                               ",{}]]},"cursor":{"x":17}}],[0.224385,{"lines":{"0":[["Just (\"ab\",\"c\")                                                                 ",{}]],"1":[["TestParser> c2                                                                  ",{}]],"2":[["Just (\"\",\"ab\")                                                                  ",{}]],"3":[["TestParser> c3                                                                  ",{}]],"4":[["Nothing                                                                         ",{}]],"5":[["TestParser> r1                                                                  ",{}]],"6":[["Just (\":=\",\"1\")                                                                 ",{}]],"7":[["TestParser> r2                                                                  ",{}]],"8":[["                                                                                ",{}]],"9":[["Program error: Expected else near then                                          ",{}]],"10":[["                                                                                ",{}]],"12":[["TestParser> a4                                                                  ",{}]],"13":[["Just (\"count\",\"\")                                                               ",{}]],"14":[["TestParser> :l TestExpr.hs                                                      ",{}]],"15":[["TestExpr> n1                                                                    ",{}]],"16":[["1                                                                               ",{}]],"17":[["TestExpr> n2                                                                    ",{}]],"18":[["1                                                                               ",{}]],"19":[["TestExpr> n3                                                                    ",{}]],"20":[["3                                                                               ",{}]],"21":[["TestExpr> n4                                                                    ",{}]],"22":[["-3                                                                              ",{}]],"23":[["TestExpr> n21                                                                   ",{}]],"24":[["                                                                                ",{}]],"25":[["Program error: Expr.value: division by 0                                        ",{}]],"26":[["                                                                                ",{}]],"27":[["TestExpr> n31                                                                   ",{}]],"28":[["                                                                                ",{}]],"29":[["Program error: Expr.value: undefined variable z                                 ",{}]],"30":[["                                                                                ",{}]],"31":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"32":[["TestStatement> p1                                                               ",{}]],"33":[["Skip                                                                            ",{}]],"34":[["TestStatement> p2                                                               ",{}]],"35":[["Read \"count\"                                                                    ",{}]],"36":[["TestStatement> p3                                                               ",{}]],"37":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"38":[["TestStatement> p4                                                               ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.011079,{"lines":{"0":[["TestParser> c2                                                                  ",{}]],"1":[["Just (\"\",\"ab\")                                                                  ",{}]],"2":[["TestParser> c3                                                                  ",{}]],"3":[["Nothing                                                                         ",{}]],"4":[["TestParser> r1                                                                  ",{}]],"5":[["Just (\":=\",\"1\")                                                                 ",{}]],"6":[["TestParser> r2                                                                  ",{}]],"7":[["                                                                                ",{}]],"8":[["Program error: Expected else near then                                          ",{}]],"9":[["                                                                                ",{}]],"11":[["TestParser> a4                                                                  ",{}]],"12":[["Just (\"count\",\"\")                                                               ",{}]],"13":[["TestParser> :l TestExpr.hs                                                      ",{}]],"14":[["TestExpr> n1                                                                    ",{}]],"15":[["1                                                                               ",{}]],"16":[["TestExpr> n2                                                                    ",{}]],"17":[["1                                                                               ",{}]],"18":[["TestExpr> n3                                                                    ",{}]],"19":[["3                                                                               ",{}]],"20":[["TestExpr> n4                                                                    ",{}]],"21":[["-3                                                                              ",{}]],"22":[["TestExpr> n21                                                                   ",{}]],"23":[["                                                                                ",{}]],"24":[["Program error: Expr.value: division by 0                                        ",{}]],"25":[["                                                                                ",{}]],"26":[["TestExpr> n31                                                                   ",{}]],"27":[["                                                                                ",{}]],"28":[["Program error: Expr.value: undefined variable z                                 ",{}]],"29":[["                                                                                ",{}]],"30":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"31":[["TestStatement> p1                                                               ",{}]],"32":[["Skip                                                                            ",{}]],"33":[["TestStatement> p2                                                               ",{}]],"34":[["Read \"count\"                                                                    ",{}]],"35":[["TestStatement> p3                                                               ",{}]],"36":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"37":[["TestStatement> p4                                                               ",{}]],"38":[["Assignment \"count\" (Num 0)                                                      ",{}]],"39":[["TestStatement>                                                                  ",{}]]},"cursor":{"x":15}}],[0.260627,{"lines":{"39":[["TestStatement> p                                                                ",{}]]},"cursor":{"x":16}}],[0.152073,{"lines":{"39":[["TestStatement> p5                                                               ",{}]]},"cursor":{"x":17}}],[0.183828,{"lines":{"0":[["Just (\"\",\"ab\")                                                                  ",{}]],"1":[["TestParser> c3                                                                  ",{}]],"2":[["Nothing                                                                         ",{}]],"3":[["TestParser> r1                                                                  ",{}]],"4":[["Just (\":=\",\"1\")                                                                 ",{}]],"5":[["TestParser> r2                                                                  ",{}]],"6":[["                                                                                ",{}]],"7":[["Program error: Expected else near then                                          ",{}]],"8":[["                                                                                ",{}]],"10":[["TestParser> a4                                                                  ",{}]],"11":[["Just (\"count\",\"\")                                                               ",{}]],"12":[["TestParser> :l TestExpr.hs                                                      ",{}]],"13":[["TestExpr> n1                                                                    ",{}]],"14":[["1                                                                               ",{}]],"15":[["TestExpr> n2                                                                    ",{}]],"16":[["1                                                                               ",{}]],"17":[["TestExpr> n3                                                                    ",{}]],"18":[["3                                                                               ",{}]],"19":[["TestExpr> n4                                                                    ",{}]],"20":[["-3                                                                              ",{}]],"21":[["TestExpr> n21                                                                   ",{}]],"22":[["                                                                                ",{}]],"23":[["Program error: Expr.value: division by 0                                        ",{}]],"24":[["                                                                                ",{}]],"25":[["TestExpr> n31                                                                   ",{}]],"26":[["                                                                                ",{}]],"27":[["Program error: Expr.value: undefined variable z                                 ",{}]],"28":[["                                                                                ",{}]],"29":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"30":[["TestStatement> p1                                                               ",{}]],"31":[["Skip                                                                            ",{}]],"32":[["TestStatement> p2                                                               ",{}]],"33":[["Read \"count\"                                                                    ",{}]],"34":[["TestStatement> p3                                                               ",{}]],"35":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"36":[["TestStatement> p4                                                               ",{}]],"37":[["Assignment \"count\" (Num 0)                                                      ",{}]],"38":[["TestStatement> p5                                                               ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.01218,{"lines":{"0":[["TestParser> c3                                                                  ",{}]],"1":[["Nothing                                                                         ",{}]],"2":[["TestParser> r1                                                                  ",{}]],"3":[["Just (\":=\",\"1\")                                                                 ",{}]],"4":[["TestParser> r2                                                                  ",{}]],"5":[["                                                                                ",{}]],"6":[["Program error: Expected else near then                                          ",{}]],"7":[["                                                                                ",{}]],"9":[["TestParser> a4                                                                  ",{}]],"10":[["Just (\"count\",\"\")                                                               ",{}]],"11":[["TestParser> :l TestExpr.hs                                                      ",{}]],"12":[["TestExpr> n1                                                                    ",{}]],"13":[["1                                                                               ",{}]],"14":[["TestExpr> n2                                                                    ",{}]],"15":[["1                                                                               ",{}]],"16":[["TestExpr> n3                                                                    ",{}]],"17":[["3                                                                               ",{}]],"18":[["TestExpr> n4                                                                    ",{}]],"19":[["-3                                                                              ",{}]],"20":[["TestExpr> n21                                                                   ",{}]],"21":[["                                                                                ",{}]],"22":[["Program error: Expr.value: division by 0                                        ",{}]],"23":[["                                                                                ",{}]],"24":[["TestExpr> n31                                                                   ",{}]],"25":[["                                                                                ",{}]],"26":[["Program error: Expr.value: undefined variable z                                 ",{}]],"27":[["                                                                                ",{}]],"28":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"29":[["TestStatement> p1                                                               ",{}]],"30":[["Skip                                                                            ",{}]],"31":[["TestStatement> p2                                                               ",{}]],"32":[["Read \"count\"                                                                    ",{}]],"33":[["TestStatement> p3                                                               ",{}]],"34":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"35":[["TestStatement> p4                                                               ",{}]],"36":[["Assignment \"count\" (Num 0)                                                      ",{}]],"37":[["TestStatement> p5                                                               ",{}]],"38":[["Begin [Skip]                                                                    ",{}]],"39":[["TestStatement>                                                                  ",{}]]},"cursor":{"x":15}}],[0.213536,{"lines":{"39":[["TestStatement> p                                                                ",{}]]},"cursor":{"x":16}}],[0.126358,{"lines":{"39":[["TestStatement> p6                                                               ",{}]]},"cursor":{"x":17}}],[0.152175,{"lines":{"0":[["Nothing                                                                         ",{}]],"1":[["TestParser> r1                                                                  ",{}]],"2":[["Just (\":=\",\"1\")                                                                 ",{}]],"3":[["TestParser> r2                                                                  ",{}]],"4":[["                                                                                ",{}]],"5":[["Program error: Expected else near then                                          ",{}]],"6":[["                                                                                ",{}]],"8":[["TestParser> a4                                                                  ",{}]],"9":[["Just (\"count\",\"\")                                                               ",{}]],"10":[["TestParser> :l TestExpr.hs                                                      ",{}]],"11":[["TestExpr> n1                                                                    ",{}]],"12":[["1                                                                               ",{}]],"13":[["TestExpr> n2                                                                    ",{}]],"14":[["1                                                                               ",{}]],"15":[["TestExpr> n3                                                                    ",{}]],"16":[["3                                                                               ",{}]],"17":[["TestExpr> n4                                                                    ",{}]],"18":[["-3                                                                              ",{}]],"19":[["TestExpr> n21                                                                   ",{}]],"20":[["                                                                                ",{}]],"21":[["Program error: Expr.value: division by 0                                        ",{}]],"22":[["                                                                                ",{}]],"23":[["TestExpr> n31                                                                   ",{}]],"24":[["                                                                                ",{}]],"25":[["Program error: Expr.value: undefined variable z                                 ",{}]],"26":[["                                                                                ",{}]],"27":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"28":[["TestStatement> p1                                                               ",{}]],"29":[["Skip                                                                            ",{}]],"30":[["TestStatement> p2                                                               ",{}]],"31":[["Read \"count\"                                                                    ",{}]],"32":[["TestStatement> p3                                                               ",{}]],"33":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"34":[["TestStatement> p4                                                               ",{}]],"35":[["Assignment \"count\" (Num 0)                                                      ",{}]],"36":[["TestStatement> p5                                                               ",{}]],"37":[["Begin [Skip]                                                                    ",{}]],"38":[["TestStatement> p6                                                               ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.01441,{"lines":{"0":[["TestParser> r1                                                                  ",{}]],"1":[["Just (\":=\",\"1\")                                                                 ",{}]],"2":[["TestParser> r2                                                                  ",{}]],"3":[["                                                                                ",{}]],"4":[["Program error: Expected else near then                                          ",{}]],"5":[["                                                                                ",{}]],"7":[["TestParser> a4                                                                  ",{}]],"8":[["Just (\"count\",\"\")                                                               ",{}]],"9":[["TestParser> :l TestExpr.hs                                                      ",{}]],"10":[["TestExpr> n1                                                                    ",{}]],"11":[["1                                                                               ",{}]],"12":[["TestExpr> n2                                                                    ",{}]],"13":[["1                                                                               ",{}]],"14":[["TestExpr> n3                                                                    ",{}]],"15":[["3                                                                               ",{}]],"16":[["TestExpr> n4                                                                    ",{}]],"17":[["-3                                                                              ",{}]],"18":[["TestExpr> n21                                                                   ",{}]],"19":[["                                                                                ",{}]],"20":[["Program error: Expr.value: division by 0                                        ",{}]],"21":[["                                                                                ",{}]],"22":[["TestExpr> n31                                                                   ",{}]],"23":[["                                                                                ",{}]],"24":[["Program error: Expr.value: undefined variable z                                 ",{}]],"25":[["                                                                                ",{}]],"26":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"27":[["TestStatement> p1                                                               ",{}]],"28":[["Skip                                                                            ",{}]],"29":[["TestStatement> p2                                                               ",{}]],"30":[["Read \"count\"                                                                    ",{}]],"31":[["TestStatement> p3                                                               ",{}]],"32":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"33":[["TestStatement> p4                                                               ",{}]],"34":[["Assignment \"count\" (Num 0)                                                      ",{}]],"35":[["TestStatement> p5                                                               ",{}]],"36":[["Begin [Skip]                                                                    ",{}]],"37":[["TestStatement> p6                                                               ",{}]],"38":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"39":[["TestStatement>                                                                  ",{}]]},"cursor":{"x":15}}],[0.201247,{"lines":{"39":[["TestStatement> p                                                                ",{}]]},"cursor":{"x":16}}],[0.144341,{"lines":{"39":[["TestStatement> p7                                                               ",{}]]},"cursor":{"x":17}}],[0.256063,{"lines":{"0":[["Just (\":=\",\"1\")                                                                 ",{}]],"1":[["TestParser> r2                                                                  ",{}]],"2":[["                                                                                ",{}]],"3":[["Program error: Expected else near then                                          ",{}]],"4":[["                                                                                ",{}]],"6":[["TestParser> a4                                                                  ",{}]],"7":[["Just (\"count\",\"\")                                                               ",{}]],"8":[["TestParser> :l TestExpr.hs                                                      ",{}]],"9":[["TestExpr> n1                                                                    ",{}]],"10":[["1                                                                               ",{}]],"11":[["TestExpr> n2                                                                    ",{}]],"12":[["1                                                                               ",{}]],"13":[["TestExpr> n3                                                                    ",{}]],"14":[["3                                                                               ",{}]],"15":[["TestExpr> n4                                                                    ",{}]],"16":[["-3                                                                              ",{}]],"17":[["TestExpr> n21                                                                   ",{}]],"18":[["                                                                                ",{}]],"19":[["Program error: Expr.value: division by 0                                        ",{}]],"20":[["                                                                                ",{}]],"21":[["TestExpr> n31                                                                   ",{}]],"22":[["                                                                                ",{}]],"23":[["Program error: Expr.value: undefined variable z                                 ",{}]],"24":[["                                                                                ",{}]],"25":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"26":[["TestStatement> p1                                                               ",{}]],"27":[["Skip                                                                            ",{}]],"28":[["TestStatement> p2                                                               ",{}]],"29":[["Read \"count\"                                                                    ",{}]],"30":[["TestStatement> p3                                                               ",{}]],"31":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"32":[["TestStatement> p4                                                               ",{}]],"33":[["Assignment \"count\" (Num 0)                                                      ",{}]],"34":[["TestStatement> p5                                                               ",{}]],"35":[["Begin [Skip]                                                                    ",{}]],"36":[["TestStatement> p6                                                               ",{}]],"37":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"38":[["TestStatement> p7                                                               ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.012654,{"lines":{"0":[["TestParser> r2                                                                  ",{}]],"1":[["                                                                                ",{}]],"2":[["Program error: Expected else near then                                          ",{}]],"3":[["                                                                                ",{}]],"5":[["TestParser> a4                                                                  ",{}]],"6":[["Just (\"count\",\"\")                                                               ",{}]],"7":[["TestParser> :l TestExpr.hs                                                      ",{}]],"8":[["TestExpr> n1                                                                    ",{}]],"9":[["1                                                                               ",{}]],"10":[["TestExpr> n2                                                                    ",{}]],"11":[["1                                                                               ",{}]],"12":[["TestExpr> n3                                                                    ",{}]],"13":[["3                                                                               ",{}]],"14":[["TestExpr> n4                                                                    ",{}]],"15":[["-3                                                                              ",{}]],"16":[["TestExpr> n21                                                                   ",{}]],"17":[["                                                                                ",{}]],"18":[["Program error: Expr.value: division by 0                                        ",{}]],"19":[["                                                                                ",{}]],"20":[["TestExpr> n31                                                                   ",{}]],"21":[["                                                                                ",{}]],"22":[["Program error: Expr.value: undefined variable z                                 ",{}]],"23":[["                                                                                ",{}]],"24":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"25":[["TestStatement> p1                                                               ",{}]],"26":[["Skip                                                                            ",{}]],"27":[["TestStatement> p2                                                               ",{}]],"28":[["Read \"count\"                                                                    ",{}]],"29":[["TestStatement> p3                                                               ",{}]],"30":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"31":[["TestStatement> p4                                                               ",{}]],"32":[["Assignment \"count\" (Num 0)                                                      ",{}]],"33":[["TestStatement> p5                                                               ",{}]],"34":[["Begin [Skip]                                                                    ",{}]],"35":[["TestStatement> p6                                                               ",{}]],"36":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"37":[["TestStatement> p7                                                               ",{}]],"38":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"39":[["TestStatement>                                                                  ",{}]]},"cursor":{"x":15}}],[0.410854,{"lines":{"39":[["TestStatement> p                                                                ",{}]]},"cursor":{"x":16}}],[0.144399,{"lines":{"39":[["TestStatement> p8                                                               ",{}]]},"cursor":{"x":17}}],[0.175898,{"lines":{"0":[["                                                                                ",{}]],"1":[["Program error: Expected else near then                                          ",{}]],"2":[["                                                                                ",{}]],"4":[["TestParser> a4                                                                  ",{}]],"5":[["Just (\"count\",\"\")                                                               ",{}]],"6":[["TestParser> :l TestExpr.hs                                                      ",{}]],"7":[["TestExpr> n1                                                                    ",{}]],"8":[["1                                                                               ",{}]],"9":[["TestExpr> n2                                                                    ",{}]],"10":[["1                                                                               ",{}]],"11":[["TestExpr> n3                                                                    ",{}]],"12":[["3                                                                               ",{}]],"13":[["TestExpr> n4                                                                    ",{}]],"14":[["-3                                                                              ",{}]],"15":[["TestExpr> n21                                                                   ",{}]],"16":[["                                                                                ",{}]],"17":[["Program error: Expr.value: division by 0                                        ",{}]],"18":[["                                                                                ",{}]],"19":[["TestExpr> n31                                                                   ",{}]],"20":[["                                                                                ",{}]],"21":[["Program error: Expr.value: undefined variable z                                 ",{}]],"22":[["                                                                                ",{}]],"23":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"24":[["TestStatement> p1                                                               ",{}]],"25":[["Skip                                                                            ",{}]],"26":[["TestStatement> p2                                                               ",{}]],"27":[["Read \"count\"                                                                    ",{}]],"28":[["TestStatement> p3                                                               ",{}]],"29":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"30":[["TestStatement> p4                                                               ",{}]],"31":[["Assignment \"count\" (Num 0)                                                      ",{}]],"32":[["TestStatement> p5                                                               ",{}]],"33":[["Begin [Skip]                                                                    ",{}]],"34":[["TestStatement> p6                                                               ",{}]],"35":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"36":[["TestStatement> p7                                                               ",{}]],"37":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"38":[["TestStatement> p8                                                               ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.011107,{"lines":{"0":[["Program error: Expected else near then                                          ",{}]],"1":[["                                                                                ",{}]],"3":[["TestParser> a4                                                                  ",{}]],"4":[["Just (\"count\",\"\")                                                               ",{}]],"5":[["TestParser> :l TestExpr.hs                                                      ",{}]],"6":[["TestExpr> n1                                                                    ",{}]],"7":[["1                                                                               ",{}]],"8":[["TestExpr> n2                                                                    ",{}]],"9":[["1                                                                               ",{}]],"10":[["TestExpr> n3                                                                    ",{}]],"11":[["3                                                                               ",{}]],"12":[["TestExpr> n4                                                                    ",{}]],"13":[["-3                                                                              ",{}]],"14":[["TestExpr> n21                                                                   ",{}]],"15":[["                                                                                ",{}]],"16":[["Program error: Expr.value: division by 0                                        ",{}]],"17":[["                                                                                ",{}]],"18":[["TestExpr> n31                                                                   ",{}]],"19":[["                                                                                ",{}]],"20":[["Program error: Expr.value: undefined variable z                                 ",{}]],"21":[["                                                                                ",{}]],"22":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"23":[["TestStatement> p1                                                               ",{}]],"24":[["Skip                                                                            ",{}]],"25":[["TestStatement> p2                                                               ",{}]],"26":[["Read \"count\"                                                                    ",{}]],"27":[["TestStatement> p3                                                               ",{}]],"28":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"29":[["TestStatement> p4                                                               ",{}]],"30":[["Assignment \"count\" (Num 0)                                                      ",{}]],"31":[["TestStatement> p5                                                               ",{}]],"32":[["Begin [Skip]                                                                    ",{}]],"33":[["TestStatement> p6                                                               ",{}]],"34":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"35":[["TestStatement> p7                                                               ",{}]],"36":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"37":[["TestStatement> p8                                                               ",{}]],"38":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"39":[["TestStatement>                                                                  ",{}]]},"cursor":{"x":15}}],[0.717539,{"lines":{"39":[["TestStatement> p                                                                ",{}]]},"cursor":{"x":16}}],[0.112308,{"lines":{"39":[["TestStatement> p9                                                               ",{}]]},"cursor":{"x":17}}],[0.942643,{"lines":{"0":[["                                                                                ",{}]],"2":[["TestParser> a4                                                                  ",{}]],"3":[["Just (\"count\",\"\")                                                               ",{}]],"4":[["TestParser> :l TestExpr.hs                                                      ",{}]],"5":[["TestExpr> n1                                                                    ",{}]],"6":[["1                                                                               ",{}]],"7":[["TestExpr> n2                                                                    ",{}]],"8":[["1                                                                               ",{}]],"9":[["TestExpr> n3                                                                    ",{}]],"10":[["3                                                                               ",{}]],"11":[["TestExpr> n4                                                                    ",{}]],"12":[["-3                                                                              ",{}]],"13":[["TestExpr> n21                                                                   ",{}]],"14":[["                                                                                ",{}]],"15":[["Program error: Expr.value: division by 0                                        ",{}]],"16":[["                                                                                ",{}]],"17":[["TestExpr> n31                                                                   ",{}]],"18":[["                                                                                ",{}]],"19":[["Program error: Expr.value: undefined variable z                                 ",{}]],"20":[["                                                                                ",{}]],"21":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"22":[["TestStatement> p1                                                               ",{}]],"23":[["Skip                                                                            ",{}]],"24":[["TestStatement> p2                                                               ",{}]],"25":[["Read \"count\"                                                                    ",{}]],"26":[["TestStatement> p3                                                               ",{}]],"27":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"28":[["TestStatement> p4                                                               ",{}]],"29":[["Assignment \"count\" (Num 0)                                                      ",{}]],"30":[["TestStatement> p5                                                               ",{}]],"31":[["Begin [Skip]                                                                    ",{}]],"32":[["TestStatement> p6                                                               ",{}]],"33":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"34":[["TestStatement> p7                                                               ",{}]],"35":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"36":[["TestStatement> p8                                                               ",{}]],"37":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"38":[["TestStatement> p9                                                               ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.007242999999999999,{"lines":{"0":[["TestParser> a4                                                                  ",{}]],"1":[["Just (\"count\",\"\")                                                               ",{}]],"2":[["TestParser> :l TestExpr.hs                                                      ",{}]],"3":[["TestExpr> n1                                                                    ",{}]],"4":[["1                                                                               ",{}]],"5":[["TestExpr> n2                                                                    ",{}]],"7":[["TestExpr> n3                                                                    ",{}]],"8":[["3                                                                               ",{}]],"9":[["TestExpr> n4                                                                    ",{}]],"10":[["-3                                                                              ",{}]],"11":[["TestExpr> n21                                                                   ",{}]],"12":[["                                                                                ",{}]],"13":[["Program error: Expr.value: division by 0                                        ",{}]],"15":[["TestExpr> n31                                                                   ",{}]],"17":[["Program error: Expr.value: undefined variable z                                 ",{}]],"19":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"20":[["TestStatement> p1                                                               ",{}]],"21":[["Skip                                                                            ",{}]],"22":[["TestStatement> p2                                                               ",{}]],"23":[["Read \"count\"                                                                    ",{}]],"24":[["TestStatement> p3                                                               ",{}]],"25":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"26":[["TestStatement> p4                                                               ",{}]],"27":[["Assignment \"count\" (Num 0)                                                      ",{}]],"28":[["TestStatement> p5                                                               ",{}]],"29":[["Begin [Skip]                                                                    ",{}]],"30":[["TestStatement> p6                                                               ",{}]],"31":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"32":[["TestStatement> p7                                                               ",{}]],"33":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"34":[["TestStatement> p8                                                               ",{}]],"35":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"36":[["TestStatement> p9                                                               ",{}]],"37":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"38":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]]}}],[0.011337,{"lines":{"39":[["TestStatement>                                                                  ",{}]]},"cursor":{"x":15}}],[0.54308,{"lines":{"39":[["TestStatement> p                                                                ",{}]]},"cursor":{"x":16}}],[0.422339,{"lines":{"39":[["TestStatement> p1                                                               ",{}]]},"cursor":{"x":17}}],[0.08072600000000001,{"lines":{"39":[["TestStatement> p10                                                              ",{}]]},"cursor":{"x":18}}],[0.175507,{"lines":{"0":[["Just (\"count\",\"\")                                                               ",{}]],"1":[["TestParser> :l TestExpr.hs                                                      ",{}]],"2":[["TestExpr> n1                                                                    ",{}]],"3":[["1                                                                               ",{}]],"4":[["TestExpr> n2                                                                    ",{}]],"5":[["1                                                                               ",{}]],"6":[["TestExpr> n3                                                                    ",{}]],"7":[["3                                                                               ",{}]],"8":[["TestExpr> n4                                                                    ",{}]],"9":[["-3                                                                              ",{}]],"10":[["TestExpr> n21                                                                   ",{}]],"11":[["                                                                                ",{}]],"12":[["Program error: Expr.value: division by 0                                        ",{}]],"13":[["                                                                                ",{}]],"14":[["TestExpr> n31                                                                   ",{}]],"15":[["                                                                                ",{}]],"16":[["Program error: Expr.value: undefined variable z                                 ",{}]],"17":[["                                                                                ",{}]],"18":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"19":[["TestStatement> p1                                                               ",{}]],"20":[["Skip                                                                            ",{}]],"21":[["TestStatement> p2                                                               ",{}]],"22":[["Read \"count\"                                                                    ",{}]],"23":[["TestStatement> p3                                                               ",{}]],"24":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"25":[["TestStatement> p4                                                               ",{}]],"26":[["Assignment \"count\" (Num 0)                                                      ",{}]],"27":[["TestStatement> p5                                                               ",{}]],"28":[["Begin [Skip]                                                                    ",{}]],"29":[["TestStatement> p6                                                               ",{}]],"30":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"31":[["TestStatement> p7                                                               ",{}]],"32":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"33":[["TestStatement> p8                                                               ",{}]],"34":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"35":[["TestStatement> p9                                                               ",{}]],"36":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"37":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"38":[["TestStatement> p10                                                              ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.013632,{"lines":{"0":[["TestParser> :l TestExpr.hs                                                      ",{}]],"1":[["TestExpr> n1                                                                    ",{}]],"2":[["1                                                                               ",{}]],"3":[["TestExpr> n2                                                                    ",{}]],"4":[["1                                                                               ",{}]],"5":[["TestExpr> n3                                                                    ",{}]],"6":[["3                                                                               ",{}]],"7":[["TestExpr> n4                                                                    ",{}]],"8":[["-3                                                                              ",{}]],"9":[["TestExpr> n21                                                                   ",{}]],"10":[["                                                                                ",{}]],"11":[["Program error: Expr.value: division by 0                                        ",{}]],"12":[["                                                                                ",{}]],"13":[["TestExpr> n31                                                                   ",{}]],"14":[["                                                                                ",{}]],"15":[["Program error: Expr.value: undefined variable z                                 ",{}]],"16":[["                                                                                ",{}]],"17":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"18":[["TestStatement> p1                                                               ",{}]],"19":[["Skip                                                                            ",{}]],"20":[["TestStatement> p2                                                               ",{}]],"21":[["Read \"count\"                                                                    ",{}]],"22":[["TestStatement> p3                                                               ",{}]],"23":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"24":[["TestStatement> p4                                                               ",{}]],"25":[["Assignment \"count\" (Num 0)                                                      ",{}]],"26":[["TestStatement> p5                                                               ",{}]],"27":[["Begin [Skip]                                                                    ",{}]],"28":[["TestStatement> p6                                                               ",{}]],"29":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"30":[["TestStatement> p7                                                               ",{}]],"31":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"32":[["TestStatement> p8                                                               ",{}]],"33":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"34":[["TestStatement> p9                                                               ",{}]],"35":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"36":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"37":[["TestStatement> p10                                                              ",{}]],"38":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"39":[["TestStatement>                                                                  ",{}]]},"cursor":{"x":15}}],[0.178137,{"lines":{"39":[["TestStatement> p                                                                ",{}]]},"cursor":{"x":16}}],[0.136053,{"lines":{"39":[["TestStatement> p1                                                               ",{}]]},"cursor":{"x":17}}],[0.193528,{"lines":{"39":[["TestStatement> p11                                                              ",{}]]},"cursor":{"x":18}}],[0.302107,{"lines":{"0":[["TestExpr> n1                                                                    ",{}]],"1":[["1                                                                               ",{}]],"2":[["TestExpr> n2                                                                    ",{}]],"3":[["1                                                                               ",{}]],"4":[["TestExpr> n3                                                                    ",{}]],"5":[["3                                                                               ",{}]],"6":[["TestExpr> n4                                                                    ",{}]],"7":[["-3                                                                              ",{}]],"8":[["TestExpr> n21                                                                   ",{}]],"9":[["                                                                                ",{}]],"10":[["Program error: Expr.value: division by 0                                        ",{}]],"11":[["                                                                                ",{}]],"12":[["TestExpr> n31                                                                   ",{}]],"13":[["                                                                                ",{}]],"14":[["Program error: Expr.value: undefined variable z                                 ",{}]],"15":[["                                                                                ",{}]],"16":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"17":[["TestStatement> p1                                                               ",{}]],"18":[["Skip                                                                            ",{}]],"19":[["TestStatement> p2                                                               ",{}]],"20":[["Read \"count\"                                                                    ",{}]],"21":[["TestStatement> p3                                                               ",{}]],"22":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"23":[["TestStatement> p4                                                               ",{}]],"24":[["Assignment \"count\" (Num 0)                                                      ",{}]],"25":[["TestStatement> p5                                                               ",{}]],"26":[["Begin [Skip]                                                                    ",{}]],"27":[["TestStatement> p6                                                               ",{}]],"28":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"29":[["TestStatement> p7                                                               ",{}]],"30":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"31":[["TestStatement> p8                                                               ",{}]],"32":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"33":[["TestStatement> p9                                                               ",{}]],"34":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"35":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"36":[["TestStatement> p10                                                              ",{}]],"37":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"38":[["TestStatement> p11                                                              ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.014805,{"lines":{"0":[["1                                                                               ",{}]],"1":[["TestExpr> n3                                                                    ",{}]],"2":[["3                                                                               ",{}]],"3":[["TestExpr> n4                                                                    ",{}]],"4":[["-3                                                                              ",{}]],"5":[["TestExpr> n21                                                                   ",{}]],"6":[["                                                                                ",{}]],"7":[["Program error: Expr.value: division by 0                                        ",{}]],"8":[["                                                                                ",{}]],"9":[["TestExpr> n31                                                                   ",{}]],"10":[["                                                                                ",{}]],"11":[["Program error: Expr.value: undefined variable z                                 ",{}]],"12":[["                                                                                ",{}]],"13":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"14":[["TestStatement> p1                                                               ",{}]],"15":[["Skip                                                                            ",{}]],"16":[["TestStatement> p2                                                               ",{}]],"17":[["Read \"count\"                                                                    ",{}]],"18":[["TestStatement> p3                                                               ",{}]],"19":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"20":[["TestStatement> p4                                                               ",{}]],"21":[["Assignment \"count\" (Num 0)                                                      ",{}]],"22":[["TestStatement> p5                                                               ",{}]],"23":[["Begin [Skip]                                                                    ",{}]],"24":[["TestStatement> p6                                                               ",{}]],"25":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"26":[["TestStatement> p7                                                               ",{}]],"27":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"28":[["TestStatement> p8                                                               ",{}]],"29":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"30":[["TestStatement> p9                                                               ",{}]],"31":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"32":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"33":[["TestStatement> p10                                                              ",{}]],"34":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"35":[["TestStatement> p11                                                              ",{}]],"36":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"37":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"38":[["r \"fac\")]                                                                       ",{}]],"39":[["TestStatement>                                                                  ",{}]]},"cursor":{"x":15}}],[4.433316,{"lines":{"39":[["TestStatement> :                                                                ",{}]]},"cursor":{"x":16}}],[0.159986,{"lines":{"39":[["TestStatement> :l                                                               ",{}]]},"cursor":{"x":17}}],[1.223606,{"cursor":{"x":18}}],[0.200049,{"lines":{"39":[["TestStatement> :l T                                                             ",{}]]},"cursor":{"x":19}}],[0.19246,{"lines":{"39":[["TestStatement> :l Test                                                          ",{}]]},"cursor":{"x":22}}],[0.375599,{"lines":{"39":[["TestStatement> :l TestP                                                         ",{}]]},"cursor":{"x":23}}],[0.37666,{"lines":{"39":[["TestStatement> :l TestPr                                                        ",{}]]},"cursor":{"x":24}}],[0.143413,{"lines":{"39":[["TestStatement> :l TestProgram.                                                  ",{}]]},"cursor":{"x":30}}],[1.216066,{"lines":{"39":[["TestStatement> :l TestProgram.h                                                 ",{}]]},"cursor":{"x":31}}],[0.0796,{"lines":{"39":[["TestStatement> :l TestProgram.hs                                                ",{}]]},"cursor":{"x":32}}],[0.248993,{"lines":{"0":[["TestExpr> n3                                                                    ",{}]],"1":[["3                                                                               ",{}]],"2":[["TestExpr> n4                                                                    ",{}]],"3":[["-3                                                                              ",{}]],"4":[["TestExpr> n21                                                                   ",{}]],"5":[["                                                                                ",{}]],"6":[["Program error: Expr.value: division by 0                                        ",{}]],"7":[["                                                                                ",{}]],"8":[["TestExpr> n31                                                                   ",{}]],"9":[["                                                                                ",{}]],"10":[["Program error: Expr.value: undefined variable z                                 ",{}]],"11":[["                                                                                ",{}]],"12":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"13":[["TestStatement> p1                                                               ",{}]],"14":[["Skip                                                                            ",{}]],"15":[["TestStatement> p2                                                               ",{}]],"16":[["Read \"count\"                                                                    ",{}]],"17":[["TestStatement> p3                                                               ",{}]],"18":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"19":[["TestStatement> p4                                                               ",{}]],"20":[["Assignment \"count\" (Num 0)                                                      ",{}]],"21":[["TestStatement> p5                                                               ",{}]],"22":[["Begin [Skip]                                                                    ",{}]],"23":[["TestStatement> p6                                                               ",{}]],"24":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"25":[["TestStatement> p7                                                               ",{}]],"26":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"27":[["TestStatement> p8                                                               ",{}]],"28":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"29":[["TestStatement> p9                                                               ",{}]],"30":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"31":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"32":[["TestStatement> p10                                                              ",{}]],"33":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"34":[["TestStatement> p11                                                              ",{}]],"35":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"36":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"37":[["r \"fac\")]                                                                       ",{}]],"38":[["TestStatement> :l TestProgram.hs                                                ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.010819,{"lines":{"39":[["TestProgram>                                                                    ",{}]]},"cursor":{"x":13}}],[4.532782,{"lines":{"39":[["TestProgram> p                                                                  ",{}]]},"cursor":{"x":14}}],[0.199449,{"lines":{"0":[["3                                                                               ",{}]],"1":[["TestExpr> n4                                                                    ",{}]],"2":[["-3                                                                              ",{}]],"3":[["TestExpr> n21                                                                   ",{}]],"4":[["                                                                                ",{}]],"5":[["Program error: Expr.value: division by 0                                        ",{}]],"6":[["                                                                                ",{}]],"7":[["TestExpr> n31                                                                   ",{}]],"8":[["                                                                                ",{}]],"9":[["Program error: Expr.value: undefined variable z                                 ",{}]],"10":[["                                                                                ",{}]],"11":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"12":[["TestStatement> p1                                                               ",{}]],"13":[["Skip                                                                            ",{}]],"14":[["TestStatement> p2                                                               ",{}]],"15":[["Read \"count\"                                                                    ",{}]],"16":[["TestStatement> p3                                                               ",{}]],"17":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"18":[["TestStatement> p4                                                               ",{}]],"19":[["Assignment \"count\" (Num 0)                                                      ",{}]],"20":[["TestStatement> p5                                                               ",{}]],"21":[["Begin [Skip]                                                                    ",{}]],"22":[["TestStatement> p6                                                               ",{}]],"23":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"24":[["TestStatement> p7                                                               ",{}]],"25":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"26":[["TestStatement> p8                                                               ",{}]],"27":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"28":[["TestStatement> p9                                                               ",{}]],"29":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"30":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"31":[["TestStatement> p10                                                              ",{}]],"32":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"33":[["TestStatement> p11                                                              ",{}]],"34":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"35":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"36":[["r \"fac\")]                                                                       ",{}]],"37":[["TestStatement> :l TestProgram.hs                                                ",{}]],"38":[["TestProgram> p                                                                  ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.014527,{"lines":{"0":[["TestExpr> n21                                                                   ",{}]],"1":[["                                                                                ",{}]],"2":[["Program error: Expr.value: division by 0                                        ",{}]],"3":[["                                                                                ",{}]],"4":[["TestExpr> n31                                                                   ",{}]],"5":[["                                                                                ",{}]],"6":[["Program error: Expr.value: undefined variable z                                 ",{}]],"7":[["                                                                                ",{}]],"8":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"9":[["TestStatement> p1                                                               ",{}]],"10":[["Skip                                                                            ",{}]],"11":[["TestStatement> p2                                                               ",{}]],"12":[["Read \"count\"                                                                    ",{}]],"13":[["TestStatement> p3                                                               ",{}]],"14":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"15":[["TestStatement> p4                                                               ",{}]],"16":[["Assignment \"count\" (Num 0)                                                      ",{}]],"17":[["TestStatement> p5                                                               ",{}]],"18":[["Begin [Skip]                                                                    ",{}]],"19":[["TestStatement> p6                                                               ",{}]],"20":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"21":[["TestStatement> p7                                                               ",{}]],"22":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"23":[["TestStatement> p8                                                               ",{}]],"24":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"25":[["TestStatement> p9                                                               ",{}]],"26":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"27":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"28":[["TestStatement> p10                                                              ",{}]],"29":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"30":[["TestStatement> p11                                                              ",{}]],"31":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"32":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"33":[["r \"fac\")]                                                                       ",{}]],"34":[["TestStatement> :l TestProgram.hs                                                ",{}]],"35":[["TestProgram> p                                                                  ",{}]],"36":[["Program [Read \"k\",Read \"n\",Assignment \"m\" (Num 1),While (Sub (Var \"n\") (Var \"m\")",{}]],"37":[[") (Begin [If (Sub (Var \"m\") (Mul (Div (Var \"m\") (Var \"k\")) (Var \"k\"))) Skip (Wri",{}]],"38":[["te (Var \"m\")),Assignment \"m\" (Add (Var \"m\") (Num 1))])]                         ",{}]],"39":[["TestProgram>                                                                    ",{}]]},"cursor":{"x":13}}],[1.913094,{"lines":{"39":[["TestProgram> p                                                                  ",{}]]},"cursor":{"x":14}}],[0.195386,{"lines":{"39":[["TestProgram> p1                                                                 ",{}]]},"cursor":{"x":15}}],[1.004601,{"lines":{"0":[["                                                                                ",{}]],"1":[["Program error: Expr.value: division by 0                                        ",{}]],"2":[["                                                                                ",{}]],"3":[["TestExpr> n31                                                                   ",{}]],"4":[["                                                                                ",{}]],"5":[["Program error: Expr.value: undefined variable z                                 ",{}]],"6":[["                                                                                ",{}]],"7":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"8":[["TestStatement> p1                                                               ",{}]],"9":[["Skip                                                                            ",{}]],"10":[["TestStatement> p2                                                               ",{}]],"11":[["Read \"count\"                                                                    ",{}]],"12":[["TestStatement> p3                                                               ",{}]],"13":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"14":[["TestStatement> p4                                                               ",{}]],"15":[["Assignment \"count\" (Num 0)                                                      ",{}]],"16":[["TestStatement> p5                                                               ",{}]],"17":[["Begin [Skip]                                                                    ",{}]],"18":[["TestStatement> p6                                                               ",{}]],"19":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"20":[["TestStatement> p7                                                               ",{}]],"21":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"22":[["TestStatement> p8                                                               ",{}]],"23":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"24":[["TestStatement> p9                                                               ",{}]],"25":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"26":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"27":[["TestStatement> p10                                                              ",{}]],"28":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"29":[["TestStatement> p11                                                              ",{}]],"30":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"31":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"32":[["r \"fac\")]                                                                       ",{}]],"33":[["TestStatement> :l TestProgram.hs                                                ",{}]],"34":[["TestProgram> p                                                                  ",{}]],"35":[["Program [Read \"k\",Read \"n\",Assignment \"m\" (Num 1),While (Sub (Var \"n\") (Var \"m\")",{}]],"36":[[") (Begin [If (Sub (Var \"m\") (Mul (Div (Var \"m\") (Var \"k\")) (Var \"k\"))) Skip (Wri",{}]],"37":[["te (Var \"m\")),Assignment \"m\" (Add (Var \"m\") (Num 1))])]                         ",{}]],"38":[["TestProgram> p1                                                                 ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.016493,{"lines":{"0":[["Program error: Expr.value: undefined variable z                                 ",{}]],"1":[["                                                                                ",{}]],"2":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"3":[["TestStatement> p1                                                               ",{}]],"4":[["Skip                                                                            ",{}]],"5":[["TestStatement> p2                                                               ",{}]],"6":[["Read \"count\"                                                                    ",{}]],"7":[["TestStatement> p3                                                               ",{}]],"8":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"9":[["TestStatement> p4                                                               ",{}]],"10":[["Assignment \"count\" (Num 0)                                                      ",{}]],"11":[["TestStatement> p5                                                               ",{}]],"12":[["Begin [Skip]                                                                    ",{}]],"13":[["TestStatement> p6                                                               ",{}]],"14":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"15":[["TestStatement> p7                                                               ",{}]],"16":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"17":[["TestStatement> p8                                                               ",{}]],"18":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"19":[["TestStatement> p9                                                               ",{}]],"20":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"21":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"22":[["TestStatement> p10                                                              ",{}]],"23":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"24":[["TestStatement> p11                                                              ",{}]],"25":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"26":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"27":[["r \"fac\")]                                                                       ",{}]],"28":[["TestStatement> :l TestProgram.hs                                                ",{}]],"29":[["TestProgram> p                                                                  ",{}]],"30":[["Program [Read \"k\",Read \"n\",Assignment \"m\" (Num 1),While (Sub (Var \"n\") (Var \"m\")",{}]],"31":[[") (Begin [If (Sub (Var \"m\") (Mul (Div (Var \"m\") (Var \"k\")) (Var \"k\"))) Skip (Wri",{}]],"32":[["te (Var \"m\")),Assignment \"m\" (Add (Var \"m\") (Num 1))])]                         ",{}]],"33":[["TestProgram> p1                                                                 ",{}]],"34":[["Program [Read \"n\",Read \"b\",Assignment \"m\" (Num 1),Assignment \"s\" (Num 0),Assignm",{}]],"35":[["ent \"p\" (Num 1),While (Var \"n\") (Begin [Assignment \"q\" (Div (Var \"n\") (Var \"b\"))",{}]],"36":[[",Assignment \"r\" (Sub (Var \"n\") (Mul (Var \"q\") (Var \"b\"))),Write (Var \"r\"),Assign",{}]],"37":[["ment \"s\" (Add (Mul (Var \"p\") (Var \"r\")) (Var \"s\")),Assignment \"p\" (Mul (Var \"p\")",{}]],"38":[[" (Num 10)),Assignment \"n\" (Var \"q\")]),Write (Var \"s\")]                          ",{}]],"39":[["TestProgram>                                                                    ",{}]]},"cursor":{"x":13}}],[0.351321,{"lines":{"39":[["TestProgram> r                                                                  ",{}]]},"cursor":{"x":14}}],[0.09589300000000001,{"lines":{"39":[["TestProgram> rp                                                                 ",{}]]},"cursor":{"x":15}}],[0.224371,{"lines":{"0":[["                                                                                ",{}]],"1":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"2":[["TestStatement> p1                                                               ",{}]],"3":[["Skip                                                                            ",{}]],"4":[["TestStatement> p2                                                               ",{}]],"5":[["Read \"count\"                                                                    ",{}]],"6":[["TestStatement> p3                                                               ",{}]],"7":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"8":[["TestStatement> p4                                                               ",{}]],"9":[["Assignment \"count\" (Num 0)                                                      ",{}]],"10":[["TestStatement> p5                                                               ",{}]],"11":[["Begin [Skip]                                                                    ",{}]],"12":[["TestStatement> p6                                                               ",{}]],"13":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"14":[["TestStatement> p7                                                               ",{}]],"15":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"16":[["TestStatement> p8                                                               ",{}]],"17":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"18":[["TestStatement> p9                                                               ",{}]],"19":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"20":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"21":[["TestStatement> p10                                                              ",{}]],"22":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"23":[["TestStatement> p11                                                              ",{}]],"24":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"25":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"26":[["r \"fac\")]                                                                       ",{}]],"27":[["TestStatement> :l TestProgram.hs                                                ",{}]],"28":[["TestProgram> p                                                                  ",{}]],"29":[["Program [Read \"k\",Read \"n\",Assignment \"m\" (Num 1),While (Sub (Var \"n\") (Var \"m\")",{}]],"30":[[") (Begin [If (Sub (Var \"m\") (Mul (Div (Var \"m\") (Var \"k\")) (Var \"k\"))) Skip (Wri",{}]],"31":[["te (Var \"m\")),Assignment \"m\" (Add (Var \"m\") (Num 1))])]                         ",{}]],"32":[["TestProgram> p1                                                                 ",{}]],"33":[["Program [Read \"n\",Read \"b\",Assignment \"m\" (Num 1),Assignment \"s\" (Num 0),Assignm",{}]],"34":[["ent \"p\" (Num 1),While (Var \"n\") (Begin [Assignment \"q\" (Div (Var \"n\") (Var \"b\"))",{}]],"35":[[",Assignment \"r\" (Sub (Var \"n\") (Mul (Var \"q\") (Var \"b\"))),Write (Var \"r\"),Assign",{}]],"36":[["ment \"s\" (Add (Mul (Var \"p\") (Var \"r\")) (Var \"s\")),Assignment \"p\" (Mul (Var \"p\")",{}]],"37":[[" (Num 10)),Assignment \"n\" (Var \"q\")]),Write (Var \"s\")]                          ",{}]],"38":[["TestProgram> rp                                                                 ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.015362,{"lines":{"0":[["TestExpr> :l TestStatement.hs                                                   ",{}]],"1":[["TestStatement> p1                                                               ",{}]],"2":[["Skip                                                                            ",{}]],"3":[["TestStatement> p2                                                               ",{}]],"4":[["Read \"count\"                                                                    ",{}]],"5":[["TestStatement> p3                                                               ",{}]],"6":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"7":[["TestStatement> p4                                                               ",{}]],"8":[["Assignment \"count\" (Num 0)                                                      ",{}]],"9":[["TestStatement> p5                                                               ",{}]],"10":[["Begin [Skip]                                                                    ",{}]],"11":[["TestStatement> p6                                                               ",{}]],"12":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"13":[["TestStatement> p7                                                               ",{}]],"14":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"15":[["TestStatement> p8                                                               ",{}]],"16":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"17":[["TestStatement> p9                                                               ",{}]],"18":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"19":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"20":[["TestStatement> p10                                                              ",{}]],"21":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"22":[["TestStatement> p11                                                              ",{}]],"23":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"24":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"25":[["r \"fac\")]                                                                       ",{}]],"26":[["TestStatement> :l TestProgram.hs                                                ",{}]],"27":[["TestProgram> p                                                                  ",{}]],"28":[["Program [Read \"k\",Read \"n\",Assignment \"m\" (Num 1),While (Sub (Var \"n\") (Var \"m\")",{}]],"29":[[") (Begin [If (Sub (Var \"m\") (Mul (Div (Var \"m\") (Var \"k\")) (Var \"k\"))) Skip (Wri",{}]],"30":[["te (Var \"m\")),Assignment \"m\" (Add (Var \"m\") (Num 1))])]                         ",{}]],"31":[["TestProgram> p1                                                                 ",{}]],"32":[["Program [Read \"n\",Read \"b\",Assignment \"m\" (Num 1),Assignment \"s\" (Num 0),Assignm",{}]],"33":[["ent \"p\" (Num 1),While (Var \"n\") (Begin [Assignment \"q\" (Div (Var \"n\") (Var \"b\"))",{}]],"34":[[",Assignment \"r\" (Sub (Var \"n\") (Mul (Var \"q\") (Var \"b\"))),Write (Var \"r\"),Assign",{}]],"35":[["ment \"s\" (Add (Mul (Var \"p\") (Var \"r\")) (Var \"s\")),Assignment \"p\" (Mul (Var \"p\")",{}]],"36":[[" (Num 10)),Assignment \"n\" (Var \"q\")]),Write (Var \"s\")]                          ",{}]],"37":[["TestProgram> rp                                                                 ",{}]],"38":[["[3,6,9,12,15]                                                                   ",{}]],"39":[["TestProgram>                                                                    ",{}]]},"cursor":{"x":13}}],[0.400453,{"lines":{"39":[["TestProgram> r                                                                  ",{}]]},"cursor":{"x":14}}],[0.09592100000000001,{"lines":{"39":[["TestProgram> rp                                                                 ",{}]]},"cursor":{"x":15}}],[0.20026,{"lines":{"39":[["TestProgram> rp1                                                                ",{}]]},"cursor":{"x":16}}],[0.378191,{"lines":{"0":[["TestStatement> p1                                                               ",{}]],"1":[["Skip                                                                            ",{}]],"2":[["TestStatement> p2                                                               ",{}]],"3":[["Read \"count\"                                                                    ",{}]],"4":[["TestStatement> p3                                                               ",{}]],"5":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"6":[["TestStatement> p4                                                               ",{}]],"7":[["Assignment \"count\" (Num 0)                                                      ",{}]],"8":[["TestStatement> p5                                                               ",{}]],"9":[["Begin [Skip]                                                                    ",{}]],"10":[["TestStatement> p6                                                               ",{}]],"11":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"12":[["TestStatement> p7                                                               ",{}]],"13":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"14":[["TestStatement> p8                                                               ",{}]],"15":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"16":[["TestStatement> p9                                                               ",{}]],"17":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"18":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"19":[["TestStatement> p10                                                              ",{}]],"20":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"21":[["TestStatement> p11                                                              ",{}]],"22":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"23":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"24":[["r \"fac\")]                                                                       ",{}]],"25":[["TestStatement> :l TestProgram.hs                                                ",{}]],"26":[["TestProgram> p                                                                  ",{}]],"27":[["Program [Read \"k\",Read \"n\",Assignment \"m\" (Num 1),While (Sub (Var \"n\") (Var \"m\")",{}]],"28":[[") (Begin [If (Sub (Var \"m\") (Mul (Div (Var \"m\") (Var \"k\")) (Var \"k\"))) Skip (Wri",{}]],"29":[["te (Var \"m\")),Assignment \"m\" (Add (Var \"m\") (Num 1))])]                         ",{}]],"30":[["TestProgram> p1                                                                 ",{}]],"31":[["Program [Read \"n\",Read \"b\",Assignment \"m\" (Num 1),Assignment \"s\" (Num 0),Assignm",{}]],"32":[["ent \"p\" (Num 1),While (Var \"n\") (Begin [Assignment \"q\" (Div (Var \"n\") (Var \"b\"))",{}]],"33":[[",Assignment \"r\" (Sub (Var \"n\") (Mul (Var \"q\") (Var \"b\"))),Write (Var \"r\"),Assign",{}]],"34":[["ment \"s\" (Add (Mul (Var \"p\") (Var \"r\")) (Var \"s\")),Assignment \"p\" (Mul (Var \"p\")",{}]],"35":[[" (Num 10)),Assignment \"n\" (Var \"q\")]),Write (Var \"s\")]                          ",{}]],"36":[["TestProgram> rp                                                                 ",{}]],"37":[["[3,6,9,12,15]                                                                   ",{}]],"38":[["TestProgram> rp1                                                                ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.011851,{"lines":{"0":[["Skip                                                                            ",{}]],"1":[["TestStatement> p2                                                               ",{}]],"2":[["Read \"count\"                                                                    ",{}]],"3":[["TestStatement> p3                                                               ",{}]],"4":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"5":[["TestStatement> p4                                                               ",{}]],"6":[["Assignment \"count\" (Num 0)                                                      ",{}]],"7":[["TestStatement> p5                                                               ",{}]],"8":[["Begin [Skip]                                                                    ",{}]],"9":[["TestStatement> p6                                                               ",{}]],"10":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"11":[["TestStatement> p7                                                               ",{}]],"12":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"13":[["TestStatement> p8                                                               ",{}]],"14":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"15":[["TestStatement> p9                                                               ",{}]],"16":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"17":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"18":[["TestStatement> p10                                                              ",{}]],"19":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"20":[["TestStatement> p11                                                              ",{}]],"21":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"22":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"23":[["r \"fac\")]                                                                       ",{}]],"24":[["TestStatement> :l TestProgram.hs                                                ",{}]],"25":[["TestProgram> p                                                                  ",{}]],"26":[["Program [Read \"k\",Read \"n\",Assignment \"m\" (Num 1),While (Sub (Var \"n\") (Var \"m\")",{}]],"27":[[") (Begin [If (Sub (Var \"m\") (Mul (Div (Var \"m\") (Var \"k\")) (Var \"k\"))) Skip (Wri",{}]],"28":[["te (Var \"m\")),Assignment \"m\" (Add (Var \"m\") (Num 1))])]                         ",{}]],"29":[["TestProgram> p1                                                                 ",{}]],"30":[["Program [Read \"n\",Read \"b\",Assignment \"m\" (Num 1),Assignment \"s\" (Num 0),Assignm",{}]],"31":[["ent \"p\" (Num 1),While (Var \"n\") (Begin [Assignment \"q\" (Div (Var \"n\") (Var \"b\"))",{}]],"32":[[",Assignment \"r\" (Sub (Var \"n\") (Mul (Var \"q\") (Var \"b\"))),Write (Var \"r\"),Assign",{}]],"33":[["ment \"s\" (Add (Mul (Var \"p\") (Var \"r\")) (Var \"s\")),Assignment \"p\" (Mul (Var \"p\")",{}]],"34":[[" (Num 10)),Assignment \"n\" (Var \"q\")]),Write (Var \"s\")]                          ",{}]],"35":[["TestProgram> rp                                                                 ",{}]],"36":[["[3,6,9,12,15]                                                                   ",{}]],"37":[["TestProgram> rp1                                                                ",{}]],"38":[["[0,0,0,0,0,0,0,0,0,0,1,10000000000]                                             ",{}]],"39":[["TestProgram>                                                                    ",{}]]},"cursor":{"x":13}}],[2.425442,{"lines":{"39":[["TestProgram> s                                                                  ",{}]]},"cursor":{"x":14}}],[0.09650400000000001,{"lines":{"39":[["TestProgram> sp                                                                 ",{}]]},"cursor":{"x":15}}],[0.183636,{"lines":{"0":[["TestStatement> p2                                                               ",{}]],"1":[["Read \"count\"                                                                    ",{}]],"2":[["TestStatement> p3                                                               ",{}]],"3":[["Write (Add (Var \"count\") (Num 1))                                               ",{}]],"4":[["TestStatement> p4                                                               ",{}]],"5":[["Assignment \"count\" (Num 0)                                                      ",{}]],"6":[["TestStatement> p5                                                               ",{}]],"7":[["Begin [Skip]                                                                    ",{}]],"8":[["TestStatement> p6                                                               ",{}]],"9":[["Begin [Assignment \"x\" (Num 0),Assignment \"x\" (Add (Var \"x\") (Num 1))]           ",{}]],"10":[["TestStatement> p7                                                               ",{}]],"11":[["If (Var \"x\") Skip (Assignment \"x\" (Sub (Num 0) (Var \"x\")))                      ",{}]],"12":[["TestStatement> p8                                                               ",{}]],"13":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"14":[["TestStatement> p9                                                               ",{}]],"15":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"16":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"17":[["TestStatement> p10                                                              ",{}]],"18":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"19":[["TestStatement> p11                                                              ",{}]],"20":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"21":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"22":[["r \"fac\")]                                                                       ",{}]],"23":[["TestStatement> :l TestProgram.hs                                                ",{}]],"24":[["TestProgram> p                                                                  ",{}]],"25":[["Program [Read \"k\",Read \"n\",Assignment \"m\" (Num 1),While (Sub (Var \"n\") (Var \"m\")",{}]],"26":[[") (Begin [If (Sub (Var \"m\") (Mul (Div (Var \"m\") (Var \"k\")) (Var \"k\"))) Skip (Wri",{}]],"27":[["te (Var \"m\")),Assignment \"m\" (Add (Var \"m\") (Num 1))])]                         ",{}]],"28":[["TestProgram> p1                                                                 ",{}]],"29":[["Program [Read \"n\",Read \"b\",Assignment \"m\" (Num 1),Assignment \"s\" (Num 0),Assignm",{}]],"30":[["ent \"p\" (Num 1),While (Var \"n\") (Begin [Assignment \"q\" (Div (Var \"n\") (Var \"b\"))",{}]],"31":[[",Assignment \"r\" (Sub (Var \"n\") (Mul (Var \"q\") (Var \"b\"))),Write (Var \"r\"),Assign",{}]],"32":[["ment \"s\" (Add (Mul (Var \"p\") (Var \"r\")) (Var \"s\")),Assignment \"p\" (Mul (Var \"p\")",{}]],"33":[[" (Num 10)),Assignment \"n\" (Var \"q\")]),Write (Var \"s\")]                          ",{}]],"34":[["TestProgram> rp                                                                 ",{}]],"35":[["[3,6,9,12,15]                                                                   ",{}]],"36":[["TestProgram> rp1                                                                ",{}]],"37":[["[0,0,0,0,0,0,0,0,0,0,1,10000000000]                                             ",{}]],"38":[["TestProgram> sp                                                                 ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.012792,{"lines":{"0":[["TestStatement> p8                                                               ",{}]],"1":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"2":[["TestStatement> p9                                                               ",{}]],"3":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"4":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"5":[["TestStatement> p10                                                              ",{}]],"6":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"7":[["TestStatement> p11                                                              ",{}]],"8":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"9":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"10":[["r \"fac\")]                                                                       ",{}]],"11":[["TestStatement> :l TestProgram.hs                                                ",{}]],"12":[["TestProgram> p                                                                  ",{}]],"13":[["Program [Read \"k\",Read \"n\",Assignment \"m\" (Num 1),While (Sub (Var \"n\") (Var \"m\")",{}]],"14":[[") (Begin [If (Sub (Var \"m\") (Mul (Div (Var \"m\") (Var \"k\")) (Var \"k\"))) Skip (Wri",{}]],"15":[["te (Var \"m\")),Assignment \"m\" (Add (Var \"m\") (Num 1))])]                         ",{}]],"16":[["TestProgram> p1                                                                 ",{}]],"17":[["Program [Read \"n\",Read \"b\",Assignment \"m\" (Num 1),Assignment \"s\" (Num 0),Assignm",{}]],"18":[["ent \"p\" (Num 1),While (Var \"n\") (Begin [Assignment \"q\" (Div (Var \"n\") (Var \"b\"))",{}]],"19":[[",Assignment \"r\" (Sub (Var \"n\") (Mul (Var \"q\") (Var \"b\"))),Write (Var \"r\"),Assign",{}]],"20":[["ment \"s\" (Add (Mul (Var \"p\") (Var \"r\")) (Var \"s\")),Assignment \"p\" (Mul (Var \"p\")",{}]],"21":[[" (Num 10)),Assignment \"n\" (Var \"q\")]),Write (Var \"s\")]                          ",{}]],"22":[["TestProgram> rp                                                                 ",{}]],"23":[["[3,6,9,12,15]                                                                   ",{}]],"24":[["TestProgram> rp1                                                                ",{}]],"25":[["[0,0,0,0,0,0,0,0,0,0,1,10000000000]                                             ",{}]],"26":[["TestProgram> sp                                                                 ",{}]],"27":[["read k                                                                          ",{}]],"28":[["read n                                                                          ",{}]],"29":[["m := 1;                                                                         ",{}]],"30":[["while n-m do                                                                    ",{}]],"31":[["begin                                                                           ",{}]],"32":[["if m-m/k*k then                                                                 ",{}]],"33":[["skip;                                                                           ",{}]],"34":[["else                                                                            ",{}]],"35":[["write m;                                                                        ",{}]],"36":[["m := m+1;                                                                       ",{}]],"37":[["end                                                                             ",{}]],"38":[["                                                                                ",{}]],"39":[["TestProgram>                                                                    ",{}]]},"cursor":{"x":13}}],[5.779016,{"lines":{"39":[["TestProgram> :                                                                  ",{}]]},"cursor":{"x":14}}],[0.191568,{"lines":{"39":[["TestProgram> :q                                                                 ",{}]]},"cursor":{"x":15}}],[0.104249,{"lines":{"0":[["While (Var \"n\") (Assignment \"n\" (Sub (Var \"n\") (Num 1)))                        ",{}]],"1":[["TestStatement> p9                                                               ",{}]],"2":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"3":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"4":[["TestStatement> p10                                                              ",{}]],"5":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"6":[["TestStatement> p11                                                              ",{}]],"7":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"8":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"9":[["r \"fac\")]                                                                       ",{}]],"10":[["TestStatement> :l TestProgram.hs                                                ",{}]],"11":[["TestProgram> p                                                                  ",{}]],"12":[["Program [Read \"k\",Read \"n\",Assignment \"m\" (Num 1),While (Sub (Var \"n\") (Var \"m\")",{}]],"13":[[") (Begin [If (Sub (Var \"m\") (Mul (Div (Var \"m\") (Var \"k\")) (Var \"k\"))) Skip (Wri",{}]],"14":[["te (Var \"m\")),Assignment \"m\" (Add (Var \"m\") (Num 1))])]                         ",{}]],"15":[["TestProgram> p1                                                                 ",{}]],"16":[["Program [Read \"n\",Read \"b\",Assignment \"m\" (Num 1),Assignment \"s\" (Num 0),Assignm",{}]],"17":[["ent \"p\" (Num 1),While (Var \"n\") (Begin [Assignment \"q\" (Div (Var \"n\") (Var \"b\"))",{}]],"18":[[",Assignment \"r\" (Sub (Var \"n\") (Mul (Var \"q\") (Var \"b\"))),Write (Var \"r\"),Assign",{}]],"19":[["ment \"s\" (Add (Mul (Var \"p\") (Var \"r\")) (Var \"s\")),Assignment \"p\" (Mul (Var \"p\")",{}]],"20":[[" (Num 10)),Assignment \"n\" (Var \"q\")]),Write (Var \"s\")]                          ",{}]],"21":[["TestProgram> rp                                                                 ",{}]],"22":[["[3,6,9,12,15]                                                                   ",{}]],"23":[["TestProgram> rp1                                                                ",{}]],"24":[["[0,0,0,0,0,0,0,0,0,0,1,10000000000]                                             ",{}]],"25":[["TestProgram> sp                                                                 ",{}]],"26":[["read k                                                                          ",{}]],"27":[["read n                                                                          ",{}]],"28":[["m := 1;                                                                         ",{}]],"29":[["while n-m do                                                                    ",{}]],"30":[["begin                                                                           ",{}]],"31":[["if m-m/k*k then                                                                 ",{}]],"32":[["skip;                                                                           ",{}]],"33":[["else                                                                            ",{}]],"34":[["write m;                                                                        ",{}]],"35":[["m := m+1;                                                                       ",{}]],"36":[["end                                                                             ",{}]],"37":[["                                                                                ",{}]],"38":[["TestProgram> :q                                                                 ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}],[0.005591,{"lines":{"0":[["TestStatement> p9                                                               ",{}]],"1":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"2":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"3":[["TestStatement> p10                                                              ",{}]],"4":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"5":[["TestStatement> p11                                                              ",{}]],"6":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"7":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"8":[["r \"fac\")]                                                                       ",{}]],"9":[["TestStatement> :l TestProgram.hs                                                ",{}]],"10":[["TestProgram> p                                                                  ",{}]],"11":[["Program [Read \"k\",Read \"n\",Assignment \"m\" (Num 1),While (Sub (Var \"n\") (Var \"m\")",{}]],"12":[[") (Begin [If (Sub (Var \"m\") (Mul (Div (Var \"m\") (Var \"k\")) (Var \"k\"))) Skip (Wri",{}]],"13":[["te (Var \"m\")),Assignment \"m\" (Add (Var \"m\") (Num 1))])]                         ",{}]],"14":[["TestProgram> p1                                                                 ",{}]],"15":[["Program [Read \"n\",Read \"b\",Assignment \"m\" (Num 1),Assignment \"s\" (Num 0),Assignm",{}]],"16":[["ent \"p\" (Num 1),While (Var \"n\") (Begin [Assignment \"q\" (Div (Var \"n\") (Var \"b\"))",{}]],"17":[[",Assignment \"r\" (Sub (Var \"n\") (Mul (Var \"q\") (Var \"b\"))),Write (Var \"r\"),Assign",{}]],"18":[["ment \"s\" (Add (Mul (Var \"p\") (Var \"r\")) (Var \"s\")),Assignment \"p\" (Mul (Var \"p\")",{}]],"19":[[" (Num 10)),Assignment \"n\" (Var \"q\")]),Write (Var \"s\")]                          ",{}]],"20":[["TestProgram> rp                                                                 ",{}]],"21":[["[3,6,9,12,15]                                                                   ",{}]],"22":[["TestProgram> rp1                                                                ",{}]],"23":[["[0,0,0,0,0,0,0,0,0,0,1,10000000000]                                             ",{}]],"24":[["TestProgram> sp                                                                 ",{}]],"25":[["read k                                                                          ",{}]],"26":[["read n                                                                          ",{}]],"27":[["m := 1;                                                                         ",{}]],"28":[["while n-m do                                                                    ",{}]],"29":[["begin                                                                           ",{}]],"30":[["if m-m/k*k then                                                                 ",{}]],"31":[["skip;                                                                           ",{}]],"32":[["else                                                                            ",{}]],"33":[["write m;                                                                        ",{}]],"34":[["m := m+1;                                                                       ",{}]],"35":[["end                                                                             ",{}]],"36":[["                                                                                ",{}]],"37":[["TestProgram> :q                                                                 ",{}]],"38":[["[Leaving Hugs]                                                                  ",{}]],"39":[["bash-3.2$                                                                       ",{}]]},"cursor":{"x":10}}],[1.930329,{"lines":{"0":[["While (Var \"n\") (Begin [Assignment \"fac\" (Mul (Var \"fac\") (Var \"n\")),Assignment ",{}]],"1":[["\"n\" (Sub (Var \"n\") (Num 1))])                                                   ",{}]],"2":[["TestStatement> p10                                                              ",{}]],"3":[["Begin [Read \"x\",Assignment \"x\" (Add (Var \"x\") (Num 1)),Write (Var \"x\")]         ",{}]],"4":[["TestStatement> p11                                                              ",{}]],"5":[["Begin [Read \"n\",Assignment \"fac\" (Num 1),While (Var \"n\") (Begin [Assignment \"fac",{}]],"6":[["\" (Mul (Var \"fac\") (Var \"n\")),Assignment \"n\" (Sub (Var \"n\") (Num 1))]),Write (Va",{}]],"7":[["r \"fac\")]                                                                       ",{}]],"8":[["TestStatement> :l TestProgram.hs                                                ",{}]],"9":[["TestProgram> p                                                                  ",{}]],"10":[["Program [Read \"k\",Read \"n\",Assignment \"m\" (Num 1),While (Sub (Var \"n\") (Var \"m\")",{}]],"11":[[") (Begin [If (Sub (Var \"m\") (Mul (Div (Var \"m\") (Var \"k\")) (Var \"k\"))) Skip (Wri",{}]],"12":[["te (Var \"m\")),Assignment \"m\" (Add (Var \"m\") (Num 1))])]                         ",{}]],"13":[["TestProgram> p1                                                                 ",{}]],"14":[["Program [Read \"n\",Read \"b\",Assignment \"m\" (Num 1),Assignment \"s\" (Num 0),Assignm",{}]],"15":[["ent \"p\" (Num 1),While (Var \"n\") (Begin [Assignment \"q\" (Div (Var \"n\") (Var \"b\"))",{}]],"16":[[",Assignment \"r\" (Sub (Var \"n\") (Mul (Var \"q\") (Var \"b\"))),Write (Var \"r\"),Assign",{}]],"17":[["ment \"s\" (Add (Mul (Var \"p\") (Var \"r\")) (Var \"s\")),Assignment \"p\" (Mul (Var \"p\")",{}]],"18":[[" (Num 10)),Assignment \"n\" (Var \"q\")]),Write (Var \"s\")]                          ",{}]],"19":[["TestProgram> rp                                                                 ",{}]],"20":[["[3,6,9,12,15]                                                                   ",{}]],"21":[["TestProgram> rp1                                                                ",{}]],"22":[["[0,0,0,0,0,0,0,0,0,0,1,10000000000]                                             ",{}]],"23":[["TestProgram> sp                                                                 ",{}]],"24":[["read k                                                                          ",{}]],"25":[["read n                                                                          ",{}]],"26":[["m := 1;                                                                         ",{}]],"27":[["while n-m do                                                                    ",{}]],"28":[["begin                                                                           ",{}]],"29":[["if m-m/k*k then                                                                 ",{}]],"30":[["skip;                                                                           ",{}]],"31":[["else                                                                            ",{}]],"32":[["write m;                                                                        ",{}]],"33":[["m := m+1;                                                                       ",{}]],"34":[["end                                                                             ",{}]],"35":[["                                                                                ",{}]],"36":[["TestProgram> :q                                                                 ",{}]],"37":[["[Leaving Hugs]                                                                  ",{}]],"38":[["bash-3.2$ exit                                                                  ",{}]],"39":[["                                                                                ",{}]]},"cursor":{"x":0}}]]