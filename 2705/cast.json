[[1.633578,{"lines":{"0":[["                                                                               ",{}]],"1":[["                                                                               ",{}]],"2":[["                                                                               ",{}]],"3":[["                                                                               ",{}]],"4":[["                                                                               ",{}]],"5":[["                                                                               ",{}]],"6":[["                                                                               ",{}]],"7":[["                                                                               ",{}]],"8":[["                                                                               ",{}]],"9":[["                                                                               ",{}]],"10":[["                                                                               ",{}]],"11":[["                                                                               ",{}]],"12":[["                                                                               ",{}]],"13":[["                                                                               ",{}]],"14":[["                                                                               ",{}]],"15":[["                                                                               ",{}]],"16":[["                                                                               ",{}]],"17":[["                                                                               ",{}]],"18":[["                                                                               ",{}]],"19":[["                                                                               ",{}]],"20":[["                                                                               ",{}]],"21":[["                                                                               ",{}]],"22":[["                                                                               ",{}]],"23":[["                                                                               ",{}]],"24":[["                                                                               ",{}]],"25":[["                                                                               ",{}]],"26":[["                                                                               ",{}]],"27":[["                                                                               ",{}]],"28":[["                                                                               ",{}]],"29":[["                                                                               ",{}]],"30":[["                                                                               ",{}]],"31":[["                                                                               ",{}]],"32":[["                                                                               ",{}]],"33":[["                                                                               ",{}]],"34":[["                                                                               ",{}]]},"cursor":{"x":0,"y":0,"visible":true}}],[0.000922,{"lines":{"0":[["~                                                                              ",{}]]},"cursor":{"x":1}}],[0.045999,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],["                                                       ",{}]]},"cursor":{"x":25}}],[0.000117,{}],[1.000131,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" g                                                     ",{}]]},"cursor":{"x":26}}],[0.070176,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" go                                                    ",{}]]},"cursor":{"x":27}}],[0.08783100000000001,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" gof                                                   ",{}]]},"cursor":{"x":28}}],[0.007861,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" gofd                                                  ",{}]]},"cursor":{"x":29}}],[0.392335,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" gof                                                   ",{}]]},"cursor":{"x":28}}],[0.159711,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" go                                                    ",{}]]},"cursor":{"x":27}}],[0.320107,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" god                                                   ",{}]]},"cursor":{"x":28}}],[0.096079,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godo                                                  ",{}]]},"cursor":{"x":29}}],[0.112939,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc",{}],[" ",{"bold":true}],["                                                ",{}]]},"cursor":{"x":31}}],[1.855246,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc d                                               ",{}]]},"cursor":{"x":32}}],[0.03162,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc da                                              ",{}]]},"cursor":{"x":33}}],[0.206714,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc database",{}],["/",{"bold":true}],["                                       ",{}]]},"cursor":{"x":40}}],[0.757132,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc database/sql",{}],["/",{"bold":true}],["                                   ",{}]]},"cursor":{"x":44}}],[0.820217,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc database/sql                                    ",{}]]},"cursor":{"x":43}}],[0.063877,{"cursor":{"x":44}}],[0.345858,{}],[0.000227,{"lines":{"1":[["Begin         Driver        NullBool      QueryRow      Scan                   ",{}]],"2":[["Close         Err           NullFloat64   RawBytes      Scanner                ",{}]],"3":[["Columns       ErrNoRows     NullInt64     Result        Stmt                   ",{}]],"4":[["Commit        ErrTxDone     NullString    Rollback      Tx                     ",{}]],"5":[["database/sql  Exec          Prepare       Row           Value                  ",{}]],"6":[["DB            Next          Query         Rows                                 ",{}]]}}],[2.918429,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc database/sql Q                                  ",{}]]},"cursor":{"x":45}}],[0.359928,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc database/sql Query                              ",{}]],"1":[["                                                                               ",{}]],"2":[["                                                                               ",{}]],"3":[["                                                                               ",{}]],"4":[["                                                                               ",{}]],"5":[["                                                                               ",{}]],"6":[["                                                                               ",{}]]},"cursor":{"x":49}}],[0.824318,{}],[4.3e-05,{"lines":{"1":[["Query     QueryRow                                                             ",{}]]}}],[0.289784,{"lines":{"1":[["Query   ",{"inverse":true}],["  QueryRow                                                             ",{}]]}}],[0.30143,{"cursor":{"x":0,"y":1}}],[0.000206,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc database/sql QueryRow                           ",{}]],"1":[["Query     ",{}],["QueryRow",{"inverse":true}],["                                                             ",{}]]},"cursor":{"x":52,"y":0}}],[0.823871,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc database/sql QueryRow",{}],[" ",{"bold":true}],["                          ",{}]],"1":[["                                                                               ",{}]]},"cursor":{"x":53}}],[0.5614440000000001,{"lines":{"0":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc database/sql QueryRow                           ",{}]],"1":[["godoc                                                                          ",{}]]},"cursor":{"x":5,"y":1}}],[0.035703,{"lines":{"1":[["godocPACKAGE                                                                   ",{}]],"3":[["package sql                                                                    ",{}]],"4":[["    import \"database/sql\"                                                      ",{}]]},"cursor":{"x":0,"y":6}}],[0.005732000000000002,{"lines":{"0":[["                                                                               ",{}]],"1":[["func (s *Stmt) QueryRow(args ...interface{}) *Row                              ",{}]],"2":[["    QueryRow executes a prepared query statement with the given arguments.     ",{}]],"3":[["    If an error occurs during the execution of the statement, that error       ",{}]],"4":[["    will be returned by a call to Scan on the returned *Row, which is always   ",{}]],"5":[["    non-nil. If the query selects no rows, the *Row's Scan will return         ",{}]],"6":[["    ErrNoRows. Otherwise, the *Row's Scan scans the first selected row and     ",{}]],"7":[["    discards the rest.                                                         ",{}]],"9":[["    Example usage:                                                             ",{}]],"11":[["        var name string                                                        ",{}]],"12":[["        err := nameByUseridStmt.QueryRow(id).Scan(&name)                       ",{}]],"14":[["type Tx struct {                                                               ",{}]],"15":[["    // contains filtered or unexported fields                                  ",{}]],"16":[["}                                                                              ",{}]],"17":[["    Tx is an in-progress database transaction.                                 ",{}]],"19":[["    A transaction must end with a call to Commit or Rollback.                  ",{}]],"21":[["    After a call to Commit or Rollback, all operations on the transaction      ",{}]],"22":[["    fail with ErrTxDone.                                                       ",{}]],"24":[["func (tx *Tx) QueryRow(query string, args ...interface{}) *Row                 ",{}]],"25":[["    QueryRow executes a query that is expected to return at most one row.      ",{}]],"26":[["    QueryRow always return a non-nil value. Errors are deferred until Row's    ",{}]],"27":[["    Scan method is called.                                                     ",{}]],"30":[["SUBDIRECTORIES                                                                 ",{}]],"32":[["        driver                                                                 ",{}]],"34":[["~                                                                              ",{}]]},"cursor":{"x":1,"y":34}}],[0.046097,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],["                                                       ",{}]]},"cursor":{"x":25}}],[4.4e-05,{}],[2.119121,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" g                                                     ",{}]]},"cursor":{"x":26}}],[0.087752,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" go                                                    ",{}]]},"cursor":{"x":27}}],[0.103914,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" god                                                   ",{}]]},"cursor":{"x":28}}],[0.71192,{"lines":{"0":[["func (s *Stmt) QueryRow(args ...interface{}) *Row                              ",{}]],"1":[["    QueryRow executes a prepared query statement with the given arguments.     ",{}]],"2":[["    If an error occurs during the execution of the statement, that error       ",{}]],"3":[["    will be returned by a call to Scan on the returned *Row, which is always   ",{}]],"4":[["    non-nil. If the query selects no rows, the *Row's Scan will return         ",{}]],"5":[["    ErrNoRows. Otherwise, the *Row's Scan scans the first selected row and     ",{}]],"6":[["    discards the rest.                                                         ",{}]],"7":[["                                                                               ",{}]],"8":[["    Example usage:                                                             ",{}]],"9":[["                                                                               ",{}]],"10":[["        var name string                                                        ",{}]],"11":[["        err := nameByUseridStmt.QueryRow(id).Scan(&name)                       ",{}]],"12":[["                                                                               ",{}]],"13":[["type Tx struct {                                                               ",{}]],"14":[["    // contains filtered or unexported fields                                  ",{}]],"15":[["}                                                                              ",{}]],"16":[["    Tx is an in-progress database transaction.                                 ",{}]],"17":[["                                                                               ",{}]],"18":[["    A transaction must end with a call to Commit or Rollback.                  ",{}]],"19":[["                                                                               ",{}]],"20":[["    After a call to Commit or Rollback, all operations on the transaction      ",{}]],"21":[["    fail with ErrTxDone.                                                       ",{}]],"22":[["                                                                               ",{}]],"23":[["func (tx *Tx) QueryRow(query string, args ...interface{}) *Row                 ",{}]],"24":[["    QueryRow executes a query that is expected to return at most one row.      ",{}]],"25":[["    QueryRow always return a non-nil value. Errors are deferred until Row's    ",{}]],"26":[["    Scan method is called.                                                     ",{}]],"27":[["                                                                               ",{}]],"29":[["SUBDIRECTORIES                                                                 ",{}]],"30":[["                                                                               ",{}]],"31":[["        driver                                                                 ",{}]],"32":[["                                                                               ",{}]],"33":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" god                                                   ",{}]],"34":[["godit  godoc                                                                   ",{}]]},"cursor":{"y":33}}],[1.233315,{"lines":{"33":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godit                                                 ",{}]],"34":[["godit",{"inverse":true}],["  godoc                                                                   ",{}]]},"cursor":{"x":30}}],[0.534836,{"cursor":{"x":0,"y":34}}],[0.000161,{"lines":{"34":[["                                                                               ",{}]]},"cursor":{"x":30,"y":33}}],[0.183654,{"lines":{"33":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godi                                                  ",{}]]},"cursor":{"x":29}}],[0.432102,{"lines":{"33":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" god                                                   ",{}]]},"cursor":{"x":28}}],[0.08801,{"lines":{"33":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godo                                                  ",{}]]},"cursor":{"x":29}}],[0.125737,{"lines":{"33":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc",{}],[" ",{"bold":true}],["                                                ",{}]]},"cursor":{"x":31}}],[0.749358,{"lines":{"33":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc                                                 ",{}]]}}],[0.000299,{"lines":{"0":[["    // contains filtered or unexported fields                                  ",{}]],"1":[["}                                                                              ",{}]],"2":[["    Tx is an in-progress database transaction.                                 ",{}]],"3":[["                                                                               ",{}]],"4":[["    A transaction must end with a call to Commit or Rollback.                  ",{}]],"5":[["                                                                               ",{}]],"6":[["    After a call to Commit or Rollback, all operations on the transaction      ",{}]],"7":[["    fail with ErrTxDone.                                                       ",{}]],"8":[["                                                                               ",{}]],"9":[["func (tx *Tx) QueryRow(query string, args ...interface{}) *Row                 ",{}]],"10":[["    QueryRow executes a query that is expected to return at most one row.      ",{}]],"11":[["    QueryRow always return a non-nil value. Errors are deferred until Row's    ",{}]],"12":[["    Scan method is called.                                                     ",{}]],"13":[["                                                                               ",{}]],"14":[["                                                                               ",{}]],"15":[["SUBDIRECTORIES                                                                 ",{}]],"16":[["                                                                               ",{}]],"17":[["        driver                                                                 ",{}]],"18":[["                                                                               ",{}]],"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc                                                 ",{}]],"20":[["archive",{"fg":1,"bold":true}],["/                 ",{}],["git.accipiterradar.com",{"fg":1,"bold":true}],["/  ",{}],["path",{"fg":1,"bold":true}],["/                        ",{}]],"21":[["bufio",{"fg":1,"bold":true}],["/                   ",{}],["github.com",{"fg":1,"bold":true}],["/              ",{}],["reflect",{"fg":1,"bold":true}],["/                     ",{}]],"22":[["builtin",{"fg":1,"bold":true}],["/                 ",{}],["go",{"fg":1,"bold":true}],["/                      ",{}],["regexp",{"fg":1,"bold":true}],["/                      ",{}]],"23":[["bytes",{"fg":1,"bold":true}],["/                   ",{}],["go_koans",{"fg":1,"bold":true}],["/                ",{}],["runtime",{"fg":1,"bold":true}],["/                     ",{}]],"24":[["code.google.com",{"fg":1,"bold":true}],["/         ",{}],["hash",{"fg":1,"bold":true}],["/                    ",{}],["sort",{"fg":1,"bold":true}],["/                        ",{}]],"25":[["compress",{"fg":1,"bold":true}],["/                ",{}],["html",{"fg":1,"bold":true}],["/                    ",{}],["strconv",{"fg":1,"bold":true}],["/                     ",{}]],"26":[["container",{"fg":1,"bold":true}],["/               ",{}],["image",{"fg":1,"bold":true}],["/                   ",{}],["strings",{"fg":1,"bold":true}],["/                     ",{}]],"27":[["crypto",{"fg":1,"bold":true}],["/                  ",{}],["index",{"fg":1,"bold":true}],["/                   ",{}],["sync",{"fg":1,"bold":true}],["/                        ",{}]],"28":[["database",{"fg":1,"bold":true}],["/                ",{}],["io",{"fg":1,"bold":true}],["/                      ",{}],["syscall",{"fg":1,"bold":true}],["/                     ",{}]],"29":[["debug",{"fg":1,"bold":true}],["/                   ",{}],["koan_assert",{"fg":1,"bold":true}],["/             ",{}],["testing",{"fg":1,"bold":true}],["/                     ",{}]],"30":[["encoding",{"fg":1,"bold":true}],["/                ",{}],["log",{"fg":1,"bold":true}],["/                     ",{}],["text",{"fg":1,"bold":true}],["/                        ",{}]],"31":[["errors",{"fg":1,"bold":true}],["/                  ",{}],["math",{"fg":1,"bold":true}],["/                    ",{}],["time",{"fg":1,"bold":true}],["/                        ",{}]],"32":[["expvar",{"fg":1,"bold":true}],["/                  ",{}],["mime",{"fg":1,"bold":true}],["/                    ",{}],["unicode",{"fg":1,"bold":true}],["/                     ",{}]],"33":[["flag",{"fg":1,"bold":true}],["/                    ",{}],["net",{"fg":1,"bold":true}],["/                     ",{}],["unsafe",{"fg":1,"bold":true}],["/                      ",{}]],"34":[["fmt",{"fg":1,"bold":true}],["/                     ",{}],["os",{"fg":1,"bold":true}],["/                                                   ",{}]]},"cursor":{"y":19}}],[2.292791,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc g                                               ",{}]]},"cursor":{"x":32}}],[0.127673,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc gi                                              ",{}]]},"cursor":{"x":33}}],[0.055926,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc git                                             ",{}]]},"cursor":{"x":34}}],[0.136082,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc gith                                            ",{}]]},"cursor":{"x":35}}],[0.122871,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com",{}],["/",{"bold":true}],["                                     ",{}]]},"cursor":{"x":42}}],[0.552307,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/                                     ",{}]],"20":[["                                                                               ",{}]],"21":[["                                                                               ",{}]],"22":[["                                                                               ",{}]],"23":[["                                                                               ",{}]],"24":[["                                                                               ",{}]],"25":[["                                                                               ",{}]],"26":[["                                                                               ",{}]],"27":[["                                                                               ",{}]],"28":[["                                                                               ",{}]],"29":[["                                                                               ",{}]],"30":[["                                                                               ",{}]],"31":[["                                                                               ",{}]],"32":[["                                                                               ",{}]],"33":[["                                                                               ",{}]],"34":[["                                                                               ",{}]]},"cursor":{"x":0,"y":20}}],[5.9e-05,{"lines":{"20":[["bmizerany",{"fg":1,"bold":true}],["/     ",{}],["erikstmartin",{"fg":1,"bold":true}],["/  ",{}],["lxn",{"fg":1,"bold":true}],["/           ",{}],["streadway",{"fg":1,"bold":true}],["/                        ",{}]],"21":[["dotcloud",{"fg":1,"bold":true}],["/      ",{}],["jteeuwen",{"fg":1,"bold":true}],["/      ",{}],["moovweb",{"fg":1,"bold":true}],["/       ",{}],["wankai",{"fg":1,"bold":true}],["/                           ",{}]],"22":[["dsymonds",{"fg":1,"bold":true}],["/      ",{}],["kr",{"fg":1,"bold":true}],["/            ",{}],["nsf",{"fg":1,"bold":true}],["/                                             ",{}]]},"cursor":{"x":42,"y":19}}],[3.052915,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/n                                    ",{}]]},"cursor":{"x":43}}],[0.107339,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf",{}],["/",{"bold":true}],["                                 ",{}]]},"cursor":{"x":46}}],[0.489328,{}],[0.000257,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/                                 ",{}]],"20":[["gocode",{"fg":1,"bold":true}],["/      ",{}],["godit",{"fg":1,"bold":true}],["/       ",{}],["termbox-go",{"fg":1,"bold":true}],["/  ",{}],["tulib",{"fg":1,"bold":true}],["/                                  ",{}]],"21":[["                                                                               ",{}]],"22":[["                                                                               ",{}]]}}],[2.242966,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/g                                ",{}]]},"cursor":{"x":47}}],[0.188412,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/go                               ",{}]],"20":[["                                                                               ",{}]]},"cursor":{"x":48}}],[0.536114,{"cursor":{"x":0,"y":20}}],[6.3e-05,{"lines":{"20":[["gocode",{"fg":1,"bold":true}],["/  ",{}],["godit",{"fg":1,"bold":true}],["/                                                                ",{}]]},"cursor":{"x":48,"y":19}}],[0.339302,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/goc                              ",{}]]},"cursor":{"x":49}}],[0.156074,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode",{}],["/",{"bold":true}],["                          ",{}]]},"cursor":{"x":53}}],[0.739738,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode                           ",{}]]}}],[0.152172,{}],[0.000338,{"lines":{"20":[["Args_auto_complete     Reply_auto_complete    RPC_auto_complete                ",{}]],"21":[["Args_close             Reply_close            RPC_close                        ",{}]],"22":[["Args_cursor_type_pkg   Reply_cursor_type_pkg  RPC_cursor_type_pkg              ",{}]],"23":[["Args_drop_cache        Reply_drop_cache       RPC_drop_cache                   ",{}]],"24":[["Args_set               Reply_set              RPC_set                          ",{}]],"25":[["Args_status            Reply_status           RPC_status                       ",{}]],"26":[["github.com/nsf/gocode  RPC                                                     ",{}]]}}],[3.839634,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode A                         ",{}]]},"cursor":{"x":54}}],[0.299282,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode Args_                     ",{}]],"20":[["                                                                               ",{}]],"21":[["                                                                               ",{}]],"22":[["                                                                               ",{}]],"23":[["                                                                               ",{}]],"24":[["                                                                               ",{}]],"25":[["                                                                               ",{}]],"26":[["                                                                               ",{}]]},"cursor":{"x":58}}],[0.6723,{"cursor":{"x":0,"y":20}}],[4e-05,{"lines":{"20":[["Args_auto_complete    Args_cursor_type_pkg  Args_set                           ",{}]],"21":[["Args_close            Args_drop_cache       Args_status                        ",{}]]},"cursor":{"x":58,"y":19}}],[0.6807530000000001,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode Args_auto_complete        ",{}]]},"cursor":{"x":0,"y":20}}],[0.000195,{"lines":{"20":[["Args_auto_complete  ",{"inverse":true}],["  Args_cursor_type_pkg  Args_set                           ",{}]]},"cursor":{"x":71,"y":19}}],[0.171056,{"cursor":{"x":0,"y":20}}],[0.000311,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode Args_close                ",{}]],"20":[["Args_auto_complete    Args_cursor_type_pkg  Args_set                           ",{}]],"21":[["Args_close          ",{"inverse":true}],["  Args_drop_cache       Args_status                        ",{}]]},"cursor":{"x":63,"y":19}}],[0.327619,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode Args_cursor_type_pkg      ",{}]],"20":[["Args_auto_complete    ",{}],["Args_cursor_type_pkg",{"inverse":true}],["  Args_set                           ",{}]],"21":[["Args_close            Args_drop_cache       Args_status                        ",{}]]},"cursor":{"x":73}}],[0.544204,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode Args_drop_cache           ",{}]],"20":[["Args_auto_complete    Args_cursor_type_pkg  Args_set                           ",{}]],"21":[["Args_close            ",{}],["Args_drop_cache     ",{"inverse":true}],["  Args_status                        ",{}]]},"cursor":{"x":68}}],[0.295934,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode Args_set                  ",{}]],"20":[["Args_auto_complete    Args_cursor_type_pkg  ",{}],["Args_set            ",{"inverse":true}],["               ",{}]],"21":[["Args_close            Args_drop_cache       Args_status                        ",{}]]},"cursor":{"x":61}}],[0.271694,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode Args_set",{}],[" ",{"bold":true}],["                 ",{}]],"20":[["                                                                               ",{}]],"21":[["                                                                               ",{}]]},"cursor":{"x":62}}],[0.529474,{"lines":{"19":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode Args_set                  ",{}]],"20":[["godoc                                                                          ",{}]]},"cursor":{"x":5,"y":20}}],[0.062397,{"lines":{"20":[["godocPACKAGE                                                                   ",{}]],"22":[["package main                                                                   ",{}]],"23":[["    import \"github.com/nsf/gocode\"                                             ",{}]]},"cursor":{"x":0,"y":25}}],[0.002891,{"lines":{"0":[["    After a call to Commit or Rollback, all operations on the transaction      ",{}]],"1":[["    fail with ErrTxDone.                                                       ",{}]],"2":[["                                                                               ",{}]],"3":[["func (tx *Tx) QueryRow(query string, args ...interface{}) *Row                 ",{}]],"4":[["    QueryRow executes a query that is expected to return at most one row.      ",{}]],"5":[["    QueryRow always return a non-nil value. Errors are deferred until Row's    ",{}]],"6":[["    Scan method is called.                                                     ",{}]],"7":[["                                                                               ",{}]],"9":[["SUBDIRECTORIES                                                                 ",{}]],"10":[["                                                                               ",{}]],"11":[["        driver                                                                 ",{}]],"12":[["                                                                               ",{}]],"13":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode Args_set                  ",{}]],"14":[["godocPACKAGE                                                                   ",{}]],"15":[["                                                                               ",{}]],"16":[["package main                                                                   ",{}]],"17":[["    import \"github.com/nsf/gocode\"                                             ",{}]],"19":[["                                                                               ",{}]],"20":[["TYPES                                                                          ",{}]],"22":[["type Args_set struct {                                                         ",{}]],"23":[["    Arg0, Arg1 string                                                          ",{}]],"24":[["}                                                                              ",{}]],"27":[["SUBDIRECTORIES                                                                 ",{}]],"29":[["        debian                                                                 ",{}]],"30":[["        emacs                                                                  ",{}]],"31":[["        emacs-company                                                          ",{}]],"32":[["        vim                                                                    ",{}]],"34":[["~                                                                              ",{}]]},"cursor":{"x":1,"y":34}}],[0.041242,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],["                                                       ",{}]]},"cursor":{"x":25}}],[1.804216,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" g                                                     ",{}]]},"cursor":{"x":26}}],[0.127864,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" go                                                    ",{}]]},"cursor":{"x":27}}],[0.09585,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" god                                                   ",{}]]},"cursor":{"x":28}}],[0.079947,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godo                                                  ",{}]]},"cursor":{"x":29}}],[0.132149,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc",{}],[" ",{"bold":true}],["                                                ",{}]]},"cursor":{"x":31}}],[2.028138,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc e                                               ",{}]]},"cursor":{"x":32}}],[0.0237,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc en                                              ",{}]]},"cursor":{"x":33}}],[0.16059,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding",{}],["/",{"bold":true}],["                                       ",{}]]},"cursor":{"x":40}}],[0.826952,{"lines":{"0":[["    fail with ErrTxDone.                                                       ",{}]],"1":[["                                                                               ",{}]],"2":[["func (tx *Tx) QueryRow(query string, args ...interface{}) *Row                 ",{}]],"3":[["    QueryRow executes a query that is expected to return at most one row.      ",{}]],"4":[["    QueryRow always return a non-nil value. Errors are deferred until Row's    ",{}]],"5":[["    Scan method is called.                                                     ",{}]],"6":[["                                                                               ",{}]],"8":[["SUBDIRECTORIES                                                                 ",{}]],"9":[["                                                                               ",{}]],"10":[["        driver                                                                 ",{}]],"11":[["                                                                               ",{}]],"12":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode Args_set                  ",{}]],"13":[["godocPACKAGE                                                                   ",{}]],"14":[["                                                                               ",{}]],"15":[["package main                                                                   ",{}]],"16":[["    import \"github.com/nsf/gocode\"                                             ",{}]],"17":[["                                                                               ",{}]],"19":[["TYPES                                                                          ",{}]],"20":[["                                                                               ",{}]],"21":[["type Args_set struct {                                                         ",{}]],"22":[["    Arg0, Arg1 string                                                          ",{}]],"23":[["}                                                                              ",{}]],"24":[["                                                                               ",{}]],"26":[["SUBDIRECTORIES                                                                 ",{}]],"27":[["                                                                               ",{}]],"28":[["        debian                                                                 ",{}]],"29":[["        emacs                                                                  ",{}]],"30":[["        emacs-company                                                          ",{}]],"31":[["        vim                                                                    ",{}]],"32":[["                                                                               ",{}]],"33":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/                                       ",{}]],"34":[["                                                                               ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["                                                                               ",{}]],"1":[["func (tx *Tx) QueryRow(query string, args ...interface{}) *Row                 ",{}]],"2":[["    QueryRow executes a query that is expected to return at most one row.      ",{}]],"3":[["    QueryRow always return a non-nil value. Errors are deferred until Row's    ",{}]],"4":[["    Scan method is called.                                                     ",{}]],"5":[["                                                                               ",{}]],"7":[["SUBDIRECTORIES                                                                 ",{}]],"8":[["                                                                               ",{}]],"9":[["        driver                                                                 ",{}]],"10":[["                                                                               ",{}]],"11":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode Args_set                  ",{}]],"12":[["godocPACKAGE                                                                   ",{}]],"13":[["                                                                               ",{}]],"14":[["package main                                                                   ",{}]],"15":[["    import \"github.com/nsf/gocode\"                                             ",{}]],"16":[["                                                                               ",{}]],"18":[["TYPES                                                                          ",{}]],"19":[["                                                                               ",{}]],"20":[["type Args_set struct {                                                         ",{}]],"21":[["    Arg0, Arg1 string                                                          ",{}]],"22":[["}                                                                              ",{}]],"23":[["                                                                               ",{}]],"25":[["SUBDIRECTORIES                                                                 ",{}]],"26":[["                                                                               ",{}]],"27":[["        debian                                                                 ",{}]],"28":[["        emacs                                                                  ",{}]],"29":[["        emacs-company                                                          ",{}]],"30":[["        vim                                                                    ",{}]],"31":[["                                                                               ",{}]],"32":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/                                       ",{}]],"33":[["ascii85",{"fg":1,"bold":true}],["/  ",{}],["base32",{"fg":1,"bold":true}],["/   ",{}],["binary",{"fg":1,"bold":true}],["/   ",{}],["gob",{"fg":1,"bold":true}],["/      ",{}],["json",{"fg":1,"bold":true}],["/     ",{}],["xml",{"fg":1,"bold":true}],["/                         ",{}]],"34":[["asn1",{"fg":1,"bold":true}],["/     ",{}],["base64",{"fg":1,"bold":true}],["/   ",{}],["csv",{"fg":1,"bold":true}],["/      ",{}],["hex",{"fg":1,"bold":true}],["/      ",{}],["pem",{"fg":1,"bold":true}],["/                                   ",{}]]},"cursor":{"x":40,"y":32}}],[0.980869,{"lines":{"32":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/j                                      ",{}]]},"cursor":{"x":41}}],[0.064583,{"lines":{"32":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json",{}],["/",{"bold":true}],["                                  ",{}]]},"cursor":{"x":45}}],[1.135012,{"lines":{"32":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json                                   ",{}]]}}],[0.17137,{}],[0.00063,{"lines":{"1":[["                                                                               ",{}]],"2":[["SUBDIRECTORIES                                                                 ",{}]],"3":[["                                                                               ",{}]],"4":[["        driver                                                                 ",{}]],"6":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc github.com/nsf/gocode Args_set                  ",{}]],"7":[["godocPACKAGE                                                                   ",{}]],"9":[["package main                                                                   ",{}]],"10":[["    import \"github.com/nsf/gocode\"                                             ",{}]],"11":[["                                                                               ",{}]],"12":[["                                                                               ",{}]],"13":[["TYPES                                                                          ",{}]],"14":[["                                                                               ",{}]],"15":[["type Args_set struct {                                                         ",{}]],"16":[["    Arg0, Arg1 string                                                          ",{}]],"17":[["}                                                                              ",{}]],"18":[["                                                                               ",{}]],"20":[["SUBDIRECTORIES                                                                 ",{}]],"21":[["                                                                               ",{}]],"22":[["        debian                                                                 ",{}]],"23":[["        emacs                                                                  ",{}]],"24":[["        emacs-company                                                          ",{}]],"25":[["        vim                                                                    ",{}]],"27":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json                                   ",{}]],"28":[["Decode                 InvalidUTF8Error       UnmarshalFieldError              ",{}]],"29":[["Decoder                Marshaler              UnmarshalJSON                    ",{}]],"30":[["Encode                 MarshalerError         UnmarshalTypeError               ",{}]],"31":[["Encoder                MarshalJSON            UnsupportedTypeError             ",{}]],"32":[["encoding/json          RawMessage             UnsupportedValueError            ",{}]],"33":[["Error                  SyntaxError                                             ",{}]],"34":[["InvalidUnmarshalError  Unmarshaler                                             ",{}]]},"cursor":{"y":27}}],[2.73211,{"lines":{"27":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json M                                 ",{}]]},"cursor":{"x":46}}],[0.231873,{"lines":{"27":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json Ma                                ",{}]]},"cursor":{"x":47}}],[0.063751,{"lines":{"27":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json Mar                               ",{}]]},"cursor":{"x":48}}],[0.271479,{"lines":{"27":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json Marshal                           ",{}]],"28":[["                                                                               ",{}]],"29":[["                                                                               ",{}]],"30":[["                                                                               ",{}]],"31":[["                                                                               ",{}]],"32":[["                                                                               ",{}]],"33":[["                                                                               ",{}]],"34":[["                                                                               ",{}]]},"cursor":{"x":52}}],[1.344303,{"lines":{"28":[["Marshaler       MarshalerError  MarshalJSON                                    ",{}]]},"cursor":{"x":25}}],[6.4e-05,{"cursor":{"x":52}}],[1.021589,{"lines":{"27":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json Marshaler                         ",{}]]},"cursor":{"x":0,"y":28}}],[4.4e-05,{"lines":{"28":[["Marshaler     ",{"inverse":true}],["  MarshalerError  MarshalJSON                                    ",{}]]},"cursor":{"x":54,"y":27}}],[1.226914,{"lines":{"27":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json MarshalerError                    ",{}]],"28":[["Marshaler       ",{}],["MarshalerError",{"inverse":true}],["  MarshalJSON                                    ",{}]]},"cursor":{"x":59}}],[0.231793,{"lines":{"27":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json MarshalJSON                       ",{}]],"28":[["Marshaler       MarshalerError  ",{}],["MarshalJSON   ",{"inverse":true}],["                                 ",{}]]},"cursor":{"x":56}}],[1.815763,{"lines":{"27":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json MarshalJSON",{}],[" ",{"bold":true}],["                      ",{}]],"28":[["                                                                               ",{}]]},"cursor":{"x":57}}],[0.473307,{"lines":{"27":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json MarshalJSON                       ",{}]],"28":[["godoc                                                                          ",{}]]},"cursor":{"x":5,"y":28}}],[0.041218,{"lines":{"28":[["godocPACKAGE                                                                   ",{}]],"30":[["package json                                                                   ",{}]],"31":[["    import \"encoding/json\"                                                     ",{}]]},"cursor":{"x":0,"y":33}}],[0.003143,{"lines":{"0":[["        vim                                                                    ",{}]],"2":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json MarshalJSON                       ",{}]],"3":[["godocPACKAGE                                                                   ",{}]],"4":[["                                                                               ",{}]],"5":[["package json                                                                   ",{}]],"6":[["    import \"encoding/json\"                                                     ",{}]],"7":[["                                                                               ",{}]],"9":[["TYPES                                                                          ",{}]],"10":[["                                                                               ",{}]],"11":[["type Marshaler interface {                                                     ",{}]],"12":[["    MarshalJSON() ([]byte, error)                                              ",{}]],"13":[["}                                                                              ",{}]],"14":[["    Marshaler is the interface implemented by objects that can marshal         ",{}]],"15":[["    themselves into valid JSON.                                                ",{}]],"16":[["                                                                               ",{}]],"17":[["type RawMessage []byte                                                         ",{}]],"18":[["    RawMessage is a raw encoded JSON object. It implements Marshaler and       ",{}]],"19":[["    Unmarshaler and can be used to delay JSON decoding or precompute a JSON    ",{}]],"20":[["    encoding.                                                                  ",{}]],"22":[["func (m *RawMessage) MarshalJSON() ([]byte, error)                             ",{}]],"23":[["    MarshalJSON returns *m as the JSON encoding of m.                          ",{}]],"24":[["                                                                               ",{}]],"25":[["                                                                               ",{}]],"26":[["BUGS                                                                           ",{}]],"27":[["                                                                               ",{}]],"28":[["    This package ignores anonymous (embedded) struct fields during encoding    ",{}]],"29":[["    and decoding. A future version may assign meaning to them. To force an     ",{}]],"30":[["    anonymous field to be ignored in all future versions of this package,      ",{}]],"31":[["    use an explicit `json:\"-\"` tag in the struct definition.                   ",{}]],"34":[["~                                                                              ",{}]]},"cursor":{"x":1,"y":34}}],[0.046325,{"lines":{"34":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],["                                                       ",{}]]},"cursor":{"x":25}}],[0.000141,{}],[3.039039,{"lines":{"0":[["                                                                               ",{}]],"1":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],[" godoc encoding/json MarshalJSON                       ",{}]],"2":[["godocPACKAGE                                                                   ",{}]],"3":[["                                                                               ",{}]],"4":[["package json                                                                   ",{}]],"5":[["    import \"encoding/json\"                                                     ",{}]],"6":[["                                                                               ",{}]],"8":[["TYPES                                                                          ",{}]],"9":[["                                                                               ",{}]],"10":[["type Marshaler interface {                                                     ",{}]],"11":[["    MarshalJSON() ([]byte, error)                                              ",{}]],"12":[["}                                                                              ",{}]],"13":[["    Marshaler is the interface implemented by objects that can marshal         ",{}]],"14":[["    themselves into valid JSON.                                                ",{}]],"15":[["                                                                               ",{}]],"16":[["type RawMessage []byte                                                         ",{}]],"17":[["    RawMessage is a raw encoded JSON object. It implements Marshaler and       ",{}]],"18":[["    Unmarshaler and can be used to delay JSON decoding or precompute a JSON    ",{}]],"19":[["    encoding.                                                                  ",{}]],"20":[["                                                                               ",{}]],"21":[["func (m *RawMessage) MarshalJSON() ([]byte, error)                             ",{}]],"22":[["    MarshalJSON returns *m as the JSON encoding of m.                          ",{}]],"23":[["                                                                               ",{}]],"25":[["BUGS                                                                           ",{}]],"26":[["                                                                               ",{}]],"27":[["    This package ignores anonymous (embedded) struct fields during encoding    ",{}]],"28":[["    and decoding. A future version may assign meaning to them. To force an     ",{}]],"29":[["    anonymous field to be ignored in all future versions of this package,      ",{}]],"30":[["    use an explicit `json:\"-\"` tag in the struct definition.                   ",{}]],"31":[["                                                                               ",{}]],"33":[[" icholy@kookaburra ",{"bg":0}],["⮀ ~ ",{"fg":0,"bg":4}],["⮀",{"fg":4}],["                                                       ",{}]],"34":[["                                                                               ",{}]]},"cursor":{"x":0}}]]